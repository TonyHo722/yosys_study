/* Generated by Yosys 0.33+34 (git sha1 54be4aca9, gcc 9.4.0-1ubuntu1~20.04.2 -fPIC -Os) */

(* dynports =  1  *)
(* hdlname = "\\IO_SERDES" *)
(* src = "io_serdes.v:34.1-468.10" *)
module \$paramod$0b6fd40895842c6fb139ea30722e0fc4a75b434f\IO_SERDES (ioclk, axi_reset_n, axi_clk, axis_rst_n, axis_clk, axi_awvalid, axi_awaddr, axi_awready, axi_wvalid, axi_wdata, axi_wstrb, axi_wready, axi_arvalid, axi_araddr, axi_arready, axi_rvalid, axi_rdata, axi_rready, cc_is_enable, as_is_tdata, as_is_tstrb
, as_is_tkeep, as_is_tlast, as_is_tid, as_is_tvalid, as_is_tuser, as_is_tready, serial_tclk, serial_txd, serial_rclk, serial_rxd, is_as_tdata, is_as_tstrb, is_as_tkeep, is_as_tlast, is_as_tid, is_as_tvalid, is_as_tuser, is_as_tready);
  (* src = "io_serdes.v:454.2-465.5" *)
  wire _000_;
  (* src = "io_serdes.v:241.2-273.5" *)
  wire [31:0] _001_;
  (* src = "io_serdes.v:241.2-273.5" *)
  wire [3:0] _002_;
  (* src = "io_serdes.v:241.2-273.5" *)
  wire [3:0] _003_;
  (* src = "io_serdes.v:241.2-273.5" *)
  (* unused_bits = "3" *)
  wire [3:0] _004_;
  (* src = "io_serdes.v:241.2-273.5" *)
  wire [3:0] _005_;
  (* src = "io_serdes.v:229.27-229.49" *)
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _006_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _007_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _008_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _009_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _010_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _011_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _012_;
  (* src = "io_serdes.v:307.54-307.76" *)
  wire [31:0] _013_;
  wire _014_;
  (* src = "io_serdes.v:163.9-163.36" *)
  wire _015_;
  (* src = "io_serdes.v:210.43-210.57" *)
  wire _016_;
  (* src = "io_serdes.v:151.28-151.59" *)
  wire _017_;
  (* src = "io_serdes.v:163.9-163.59" *)
  wire _018_;
  (* src = "io_serdes.v:210.9-210.57" *)
  wire _019_;
  (* src = "io_serdes.v:266.8-266.36" *)
  wire _020_;
  (* src = "io_serdes.v:210.10-210.38" *)
  wire _021_;
  wire _022_;
  wire _023_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _024_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _025_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _026_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _027_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _028_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _029_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _030_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _031_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _032_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _033_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _034_;
  (* src = "io_serdes.v:0.0-0.0" *)
  wire _035_;
  (* src = "io_serdes.v:151.27-151.68" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _036_;
  (* src = "io_serdes.v:130.35-130.55" *)
  wire [7:0] Serial_Data_In_tdata;
  (* src = "io_serdes.v:127.7-127.31" *)
  wire Serial_Data_In_tid_tuser;
  (* src = "io_serdes.v:128.7-128.27" *)
  wire Serial_Data_In_tkeep;
  (* src = "io_serdes.v:126.7-126.41" *)
  wire Serial_Data_In_tlast_tvalid_tready;
  (* src = "io_serdes.v:129.7-129.27" *)
  wire Serial_Data_In_tstrb;
  (* src = "io_serdes.v:122.35-122.56" *)
  wire [7:0] Serial_Data_Out_tdata;
  (* src = "io_serdes.v:119.7-119.32" *)
  wire Serial_Data_Out_tid_tuser;
  (* src = "io_serdes.v:120.7-120.28" *)
  wire Serial_Data_Out_tkeep;
  (* src = "io_serdes.v:118.7-118.42" *)
  wire Serial_Data_Out_tlast_tvalid_tready;
  (* src = "io_serdes.v:121.7-121.28" *)
  wire Serial_Data_Out_tstrb;
  (* src = "io_serdes.v:77.33-77.44" *)
  input [31:0] as_is_tdata;
  wire [31:0] as_is_tdata;
  (* src = "io_serdes.v:275.24-275.39" *)
  reg [31:0] as_is_tdata_buf;
  (* src = "io_serdes.v:81.21-81.30" *)
  input [1:0] as_is_tid;
  wire [1:0] as_is_tid;
  (* src = "io_serdes.v:278.28-278.47" *)
  reg [3:0] as_is_tid_tuser_buf;
  (* src = "io_serdes.v:79.37-79.48" *)
  input [3:0] as_is_tkeep;
  wire [3:0] as_is_tkeep;
  (* src = "io_serdes.v:277.28-277.43" *)
  reg [3:0] as_is_tkeep_buf;
  (* src = "io_serdes.v:80.15-80.26" *)
  input as_is_tlast;
  wire as_is_tlast;
  (* src = "io_serdes.v:279.28-279.57" *)
  wire [3:0] as_is_tlast_tvalid_tready_buf;
  (* src = "io_serdes.v:84.15-84.27" *)
  input as_is_tready;
  wire as_is_tready;
  (* src = "io_serdes.v:78.37-78.48" *)
  input [3:0] as_is_tstrb;
  wire [3:0] as_is_tstrb;
  (* src = "io_serdes.v:276.28-276.43" *)
  reg [3:0] as_is_tstrb_buf;
  (* src = "io_serdes.v:83.21-83.32" *)
  input [1:0] as_is_tuser;
  wire [1:0] as_is_tuser;
  (* src = "io_serdes.v:82.15-82.27" *)
  input as_is_tvalid;
  wire as_is_tvalid;
  (* src = "io_serdes.v:64.33-64.43" *)
  input [11:0] axi_araddr;
  wire [11:0] axi_araddr;
  (* src = "io_serdes.v:65.16-65.27" *)
  output axi_arready;
  wire axi_arready;
  (* src = "io_serdes.v:63.15-63.26" *)
  input axi_arvalid;
  wire axi_arvalid;
  (* src = "io_serdes.v:53.33-53.43" *)
  input [11:0] axi_awaddr;
  wire [11:0] axi_awaddr;
  (* src = "io_serdes.v:54.15-54.26" *)
  output axi_awready;
  wire axi_awready;
  (* src = "io_serdes.v:142.7-142.22" *)
  wire axi_awready_out;
  (* src = "io_serdes.v:52.15-52.26" *)
  input axi_awvalid;
  wire axi_awvalid;
  (* src = "io_serdes.v:109.7-109.21" *)
  wire axi_awvalid_in;
  (* src = "io_serdes.v:46.15-46.22" *)
  input axi_clk;
  wire axi_clk;
  (* src = "io_serdes.v:69.34-69.43" *)
  output [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "io_serdes.v:45.15-45.26" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "io_serdes.v:70.15-70.25" *)
  input axi_rready;
  wire axi_rready;
  (* src = "io_serdes.v:68.16-68.26" *)
  output axi_rvalid;
  wire axi_rvalid;
  (* src = "io_serdes.v:58.33-58.42" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "io_serdes.v:60.15-60.25" *)
  output axi_wready;
  wire axi_wready;
  (* src = "io_serdes.v:147.7-147.21" *)
  wire axi_wready_out;
  (* src = "io_serdes.v:59.37-59.46" *)
  input [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "io_serdes.v:57.15-57.25" *)
  input axi_wvalid;
  wire axi_wvalid;
  (* src = "io_serdes.v:110.7-110.20" *)
  wire axi_wvalid_in;
  (* src = "io_serdes.v:49.15-49.23" *)
  input axis_clk;
  wire axis_clk;
  (* src = "io_serdes.v:48.15-48.25" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "io_serdes.v:72.15-72.27" *)
  input cc_is_enable;
  wire cc_is_enable;
  (* src = "io_serdes.v:106.7-106.14" *)
  wire coreclk;
  (* src = "io_serdes.v:43.15-43.20" *)
  input ioclk;
  wire ioclk;
  (* src = "io_serdes.v:434.10-434.21" *)
  (* unused_bits = "0" *)
  wire is_as_dummy;
  (* src = "io_serdes.v:93.34-93.45" *)
  output [31:0] is_as_tdata;
  wire [31:0] is_as_tdata;
  (* src = "io_serdes.v:97.22-97.31" *)
  output [1:0] is_as_tid;
  wire [1:0] is_as_tid;
  (* src = "io_serdes.v:95.38-95.49" *)
  output [3:0] is_as_tkeep;
  wire [3:0] is_as_tkeep;
  (* src = "io_serdes.v:96.16-96.27" *)
  output is_as_tlast;
  wire is_as_tlast;
  (* src = "io_serdes.v:100.16-100.28" *)
  output is_as_tready;
  wire is_as_tready;
  (* src = "io_serdes.v:451.6-451.22" *)
  reg is_as_tready_out;
  (* src = "io_serdes.v:112.7-112.26" *)
  wire is_as_tready_remote;
  (* src = "io_serdes.v:94.38-94.49" *)
  output [3:0] is_as_tstrb;
  wire [3:0] is_as_tstrb;
  (* src = "io_serdes.v:99.22-99.33" *)
  output [1:0] is_as_tuser;
  wire [1:0] is_as_tuser;
  (* src = "io_serdes.v:98.16-98.28" *)
  output is_as_tvalid;
  wire is_as_tvalid;
  (* src = "io_serdes.v:187.32-187.41" *)
  wire [1:0] phase_cnt;
  (* src = "io_serdes.v:235.24-235.43" *)
  reg [31:0] pre_as_is_tdata_buf;
  (* src = "io_serdes.v:238.28-238.51" *)
  reg [3:0] pre_as_is_tid_tuser_buf;
  (* src = "io_serdes.v:237.28-237.47" *)
  reg [3:0] pre_as_is_tkeep_buf;
  (* src = "io_serdes.v:239.28-239.61" *)
  wire [3:0] pre_as_is_tlast_tvalid_tready_buf;
  (* src = "io_serdes.v:236.28-236.47" *)
  reg [3:0] pre_as_is_tstrb_buf;
  (* src = "io_serdes.v:202.7-202.23" *)
  wire rx_received_data;
  (* src = "io_serdes.v:108.7-108.12" *)
  wire rxclk;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[0] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[10] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[1] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[2] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[3] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[4] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[5] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[6] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[7] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[8] ;
  (* src = "io_serdes.v:348.7-348.23" *)
  (* unused_bits = "0" *)
  wire \rxdata_out_valid[9] ;
  (* src = "io_serdes.v:350.6-350.10" *)
  reg rxen;
  (* src = "io_serdes.v:137.6-137.14" *)
  reg rxen_ctl;
  (* src = "io_serdes.v:90.18-90.29" *)
  input serial_rclk;
  wire serial_rclk;
  (* src = "io_serdes.v:91.39-91.49" *)
  input [11:0] serial_rxd;
  wire [11:0] serial_rxd;
  (* src = "io_serdes.v:86.18-86.29" *)
  output serial_tclk;
  wire serial_tclk;
  (* src = "io_serdes.v:87.39-87.49" *)
  output [11:0] serial_txd;
  wire [11:0] serial_txd;
  (* src = "io_serdes.v:220.31-220.49" *)
  reg [1:0] tx_shift_phase_cnt;
  (* src = "io_serdes.v:107.7-107.12" *)
  wire txclk;
  (* src = "io_serdes.v:134.6-134.10" *)
  reg txen;
  (* src = "io_serdes.v:138.6-138.14" *)
  reg txen_ctl;
  (* src = "io_serdes.v:111.7-111.15" *)
  wire txen_out;
  assign _006_ = tx_shift_phase_cnt + (* src = "io_serdes.v:229.27-229.49" *) 32'd1;
  assign _007_ = 32'd4 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _008_ = 32'd8 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _009_ = 32'd12 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _010_ = 32'd16 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _011_ = 32'd20 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _012_ = 32'd24 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign _013_ = 32'd28 + (* src = "io_serdes.v:307.54-307.76" *) tx_shift_phase_cnt;
  assign serial_tclk = ioclk & (* src = "io_serdes.v:300.17-300.27" *) txen;
  assign serial_txd[0] = _028_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[1] = _029_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[2] = _030_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[3] = _031_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[4] = _032_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[5] = _033_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[6] = _034_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign serial_txd[7] = _035_ & (* src = "io_serdes.v:307.38-307.84" *) txen;
  assign Serial_Data_Out_tstrb = _024_ & (* src = "io_serdes.v:340.33-340.75" *) txen;
  assign Serial_Data_Out_tkeep = _025_ & (* src = "io_serdes.v:341.33-341.75" *) txen;
  assign Serial_Data_Out_tid_tuser = _026_ & (* src = "io_serdes.v:342.37-342.83" *) txen;
  assign Serial_Data_Out_tlast_tvalid_tready = _027_ & (* src = "io_serdes.v:343.47-343.103" *) txen;
  (* src = "io_serdes.v:156.2-173.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) txen_ctl <= 1'h0;
    else if (_014_) txen_ctl <= axi_wdata[1];
  reg [2:0] _059_;
  (* src = "io_serdes.v:241.2-273.5" *)
  always @(negedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) _059_ <= 3'h0;
    else _059_ <= _004_[2:0];
  assign pre_as_is_tlast_tvalid_tready_buf[2:0] = _059_;
  (* src = "io_serdes.v:223.2-233.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) tx_shift_phase_cnt <= 2'h3;
    else if (txen) tx_shift_phase_cnt <= _006_[1:0];
  (* src = "io_serdes.v:205.2-218.5" *)
  always @(negedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) txen <= 1'h0;
    else if (_019_) txen <= 1'h1;
  (* src = "io_serdes.v:156.2-173.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) rxen_ctl <= 1'h0;
    else if (_014_) rxen_ctl <= axi_wdata[0];
  (* src = "io_serdes.v:352.2-362.5" *)
  always @(negedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rxen <= 1'h0;
    else if (rxen_ctl) rxen <= 1'h1;
  (* src = "io_serdes.v:281.2-298.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) as_is_tdata_buf <= 32'd0;
    else if (_016_) as_is_tdata_buf <= pre_as_is_tdata_buf;
  (* src = "io_serdes.v:281.2-298.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) as_is_tstrb_buf <= 4'h0;
    else if (_016_) as_is_tstrb_buf <= pre_as_is_tstrb_buf;
  (* src = "io_serdes.v:281.2-298.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) as_is_tkeep_buf <= 4'h0;
    else if (_016_) as_is_tkeep_buf <= pre_as_is_tkeep_buf;
  (* src = "io_serdes.v:281.2-298.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) as_is_tid_tuser_buf <= 4'h0;
    else if (_016_) as_is_tid_tuser_buf <= pre_as_is_tid_tuser_buf;
  reg [2:0] _068_;
  (* src = "io_serdes.v:281.2-298.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) _068_ <= 3'h0;
    else if (_016_) _068_ <= pre_as_is_tlast_tvalid_tready_buf[2:0];
  assign as_is_tlast_tvalid_tready_buf[2:0] = _068_;
  assign _014_ = & { _017_, _018_ };
  assign _015_ = ! (* src = "io_serdes.v:163.9-163.36" *) axi_awaddr[11:2];
  assign _016_ = phase_cnt == (* src = "io_serdes.v:290.8-290.22" *) 2'h3;
  assign axi_awvalid_in = axi_awvalid && (* src = "io_serdes.v:141.27-141.54" *) cc_is_enable;
  assign axi_wvalid_in = axi_wvalid && (* src = "io_serdes.v:146.26-146.52" *) cc_is_enable;
  assign _017_ = axi_awvalid_in && (* src = "io_serdes.v:162.9-162.40" *) axi_wvalid_in;
  assign _018_ = _015_ && (* src = "io_serdes.v:163.9-163.59" *) axi_wstrb[0];
  assign _019_ = _021_ && (* src = "io_serdes.v:210.9-210.57" *) _016_;
  assign _020_ = is_as_tready_out && (* src = "io_serdes.v:266.8-266.36" *) as_is_tvalid;
  assign _021_ = txen_ctl || (* src = "io_serdes.v:210.10-210.38" *) rx_received_data;
  (* src = "io_serdes.v:454.2-465.5" *)
  always @(posedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) is_as_tready_out <= 1'h0;
    else is_as_tready_out <= _000_;
  (* src = "io_serdes.v:241.2-273.5" *)
  always @(negedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) pre_as_is_tdata_buf <= 32'd0;
    else pre_as_is_tdata_buf <= _001_;
  (* src = "io_serdes.v:241.2-273.5" *)
  always @(negedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) pre_as_is_tstrb_buf <= 4'h0;
    else pre_as_is_tstrb_buf <= _005_;
  (* src = "io_serdes.v:241.2-273.5" *)
  always @(negedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) pre_as_is_tkeep_buf <= 4'h0;
    else pre_as_is_tkeep_buf <= _003_;
  (* src = "io_serdes.v:241.2-273.5" *)
  always @(negedge axis_clk, negedge axis_rst_n)
    if (!axis_rst_n) pre_as_is_tid_tuser_buf <= 4'h0;
    else pre_as_is_tid_tuser_buf <= _002_;
  assign _022_ = rx_received_data ? (* full_case = 32'd1 *) (* src = "io_serdes.v:462.8-462.29|io_serdes.v:462.4-463.49" *) is_as_tready_remote : 1'h1;
  assign _000_ = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:458.13-458.18|io_serdes.v:458.8-464.6" *) _022_ : 1'h0;
  assign _004_[0] = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tready : 1'h0;
  assign _023_ = _020_ ? (* full_case = 32'd1 *) (* src = "io_serdes.v:266.8-266.36|io_serdes.v:266.4-271.7" *) as_is_tvalid : 1'h0;
  assign _004_[1] = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) _023_ : 1'h0;
  assign _002_[3:2] = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tid : 2'h0;
  assign _002_[1:0] = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tuser : 2'h0;
  assign _003_ = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tkeep : 4'h0;
  assign _005_ = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tstrb : 4'h0;
  assign _001_ = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tdata : 32'd0;
  assign _004_[2] = txen ? (* full_case = 32'd1 *) (* src = "io_serdes.v:258.19-258.24|io_serdes.v:258.14-272.6" *) as_is_tlast : 1'h0;
  wire [3:0] _108_ = as_is_tstrb_buf;
  assign _024_ = _108_[tx_shift_phase_cnt +: 1];
  wire [3:0] _109_ = as_is_tkeep_buf;
  assign _025_ = _109_[tx_shift_phase_cnt +: 1];
  wire [3:0] _110_ = as_is_tid_tuser_buf;
  assign _026_ = _110_[tx_shift_phase_cnt +: 1];
  wire [3:0] _111_ = { 1'h0, as_is_tlast_tvalid_tready_buf[2:0] };
  assign _027_ = _111_[tx_shift_phase_cnt +: 1];
  wire [31:0] _112_ = as_is_tdata_buf;
  assign _028_ = _112_[$signed({ 30'h00000000, tx_shift_phase_cnt }) +: 1];
  wire [31:0] _113_ = as_is_tdata_buf;
  assign _029_ = _113_[$signed(_007_) +: 1];
  wire [31:0] _114_ = as_is_tdata_buf;
  assign _030_ = _114_[$signed(_008_) +: 1];
  wire [31:0] _115_ = as_is_tdata_buf;
  assign _031_ = _115_[$signed(_009_) +: 1];
  wire [31:0] _116_ = as_is_tdata_buf;
  assign _032_ = _116_[$signed(_010_) +: 1];
  wire [31:0] _117_ = as_is_tdata_buf;
  assign _033_ = _117_[$signed(_011_) +: 1];
  wire [31:0] _118_ = as_is_tdata_buf;
  assign _034_ = _118_[$signed(_012_) +: 1];
  wire [31:0] _119_ = as_is_tdata_buf;
  assign _035_ = _119_[$signed(_013_) +: 1];
  assign { _036_[31:1], axi_awready } = _017_ ? (* src = "io_serdes.v:152.26-152.67" *) 32'd1 : 32'd0;
  (* src = "io_serdes.v:192.2-197.3" *)
  \$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=s32'00000000000000000000000000000100  fsic_coreclk_phase_cnt_0 (
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .phase_cnt_out(phase_cnt)
  );
  (* src = "io_serdes.v:440.2-449.3" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  fsic_io_serdes_rx_fc (
    .Serial_Data_in(serial_rxd[11]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out({ is_as_dummy, is_as_tlast, is_as_tvalid, is_as_tready_remote }),
    .rxdata_out_valid(rx_received_data),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:423.2-432.3" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  fsic_io_serdes_rx_tid_tuser (
    .Serial_Data_in(serial_rxd[10]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out({ is_as_tid, is_as_tuser }),
    .rxdata_out_valid(\rxdata_out_valid[10] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:408.2-417.3" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  fsic_io_serdes_rx_tkeep (
    .Serial_Data_in(serial_rxd[9]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tkeep),
    .rxdata_out_valid(\rxdata_out_valid[9] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:392.2-401.3" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  fsic_io_serdes_rx_tstrb (
    .Serial_Data_in(serial_rxd[8]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tstrb),
    .rxdata_out_valid(\rxdata_out_valid[8] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[0].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[0]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[3:0]),
    .rxdata_out_valid(\rxdata_out_valid[0] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[1].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[1]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[7:4]),
    .rxdata_out_valid(\rxdata_out_valid[1] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[2].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[2]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[11:8]),
    .rxdata_out_valid(\rxdata_out_valid[2] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[3].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[3]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[15:12]),
    .rxdata_out_valid(\rxdata_out_valid[3] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[4].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[4]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[19:16]),
    .rxdata_out_valid(\rxdata_out_valid[4] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[5].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[5]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[23:20]),
    .rxdata_out_valid(\rxdata_out_valid[5] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[6].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[6]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[27:24]),
    .rxdata_out_valid(\rxdata_out_valid[6] ),
    .rxen(rxen)
  );
  (* src = "io_serdes.v:373.4-382.5" *)
  \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx  \genblk2[7].fsic_io_serdes_rx_tdata  (
    .Serial_Data_in(serial_rxd[7]),
    .axis_rst_n(axis_rst_n),
    .coreclk(axis_clk),
    .ioclk(ioclk),
    .rxclk(serial_rclk),
    .rxdata_out(is_as_tdata[31:28]),
    .rxdata_out_valid(\rxdata_out_valid[7] ),
    .rxen(rxen)
  );
  assign _036_[0] = axi_awready;
  assign Serial_Data_In_tdata = serial_rxd[7:0];
  assign Serial_Data_In_tid_tuser = serial_rxd[10];
  assign Serial_Data_In_tkeep = serial_rxd[9];
  assign Serial_Data_In_tlast_tvalid_tready = serial_rxd[11];
  assign Serial_Data_In_tstrb = serial_rxd[8];
  assign Serial_Data_Out_tdata = serial_txd[7:0];
  assign as_is_tlast_tvalid_tready_buf[3] = 1'h0;
  assign axi_arready = 1'h1;
  assign axi_awready_out = axi_awready;
  assign axi_rdata = { 30'h00000000, txen_ctl, rxen_ctl };
  assign axi_rvalid = 1'h1;
  assign axi_wready = axi_awready;
  assign axi_wready_out = axi_awready;
  assign coreclk = axis_clk;
  assign is_as_tready = is_as_tready_out;
  assign pre_as_is_tlast_tvalid_tready_buf[3] = 1'h0;
  assign rxclk = serial_rclk;
  assign serial_txd[11:8] = { Serial_Data_Out_tlast_tvalid_tready, Serial_Data_Out_tid_tuser, Serial_Data_Out_tkeep, Serial_Data_Out_tstrb };
  assign txclk = serial_tclk;
  assign txen_out = txen;
endmodule

(* hdlname = "\\CFG_CTRL" *)
(* src = "config_ctrl.v:2.1-574.10" *)
module \$paramod$3faf3427151f109282c99465db437054f2e3eec4\CFG_CTRL (aa_cfg_awvalid, aa_cfg_awaddr, aa_cfg_wvalid, aa_cfg_wdata, aa_cfg_wstrb, aa_cfg_arvalid, aa_cfg_araddr, aa_cfg_rready, aa_cfg_rdata, aa_cfg_rvalid, aa_cfg_awready, aa_cfg_wready, aa_cfg_arready, axi_wready1, axi_awready1, axi_arready1, axi_rdata1, axi_rvalid1, axi_awready4, axi_wready4, axi_arready4
, axi_rdata4, axi_rvalid4, axi_awready3, axi_wready3, axi_arready3, axi_rdata3, axi_rvalid3, axi_awready0, axi_wready0, axi_arready0, axi_rdata0, axi_rvalid0, axi_awready2, axi_wready2, axi_arready2, axi_rdata2, axi_rvalid2, axi_awvalid, axi_awaddr, axi_wvalid, axi_wdata
, axi_wstrb, axi_arvalid, axi_araddr, axi_rready, cc_aa_enable, cc_as_enable, cc_is_enable, cc_la_enable, cc_up_enable, user_prj_sel, wb_rst, wb_clk, wbs_adr, wbs_wdata, wbs_sel, wbs_cyc, wbs_stb, wbs_we, wbs_ack, wbs_rdata, user_clock2
, axi_clk, axi_reset_n, uck2_rst_n);
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _000_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _001_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire [31:0] _002_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _003_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _004_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [14:0] _005_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _006_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [14:0] _007_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _008_;
  (* src = "config_ctrl.v:413.2-435.5" *)
  wire _009_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _010_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [31:0] _011_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [3:0] _012_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _013_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _014_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _015_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _016_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _017_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _018_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _019_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  wire _020_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire [2:0] _021_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [31:0] _022_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _023_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire [31:0] _024_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _025_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  wire _026_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [2:0] _027_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire [31:0] _028_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire _029_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire [31:0] _030_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  wire _031_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire [31:0] _032_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire _033_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire _034_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  wire [31:0] _035_;
  (* src = "config_ctrl.v:194.32-194.64" *)
  wire _036_;
  (* src = "config_ctrl.v:194.69-194.101" *)
  wire _037_;
  (* src = "config_ctrl.v:194.107-194.139" *)
  wire _038_;
  (* src = "config_ctrl.v:194.145-194.177" *)
  wire _039_;
  (* src = "config_ctrl.v:194.183-194.215" *)
  wire _040_;
  (* src = "config_ctrl.v:194.221-194.250" *)
  wire _041_;
  (* src = "config_ctrl.v:194.256-194.288" *)
  wire _042_;
  (* src = "config_ctrl.v:195.31-195.62" *)
  wire _043_;
  (* src = "config_ctrl.v:195.67-195.98" *)
  wire _044_;
  (* src = "config_ctrl.v:195.104-195.135" *)
  wire _045_;
  (* src = "config_ctrl.v:195.141-195.172" *)
  wire _046_;
  (* src = "config_ctrl.v:195.178-195.209" *)
  wire _047_;
  (* src = "config_ctrl.v:195.215-195.243" *)
  wire _048_;
  (* src = "config_ctrl.v:195.249-195.280" *)
  wire _049_;
  (* src = "config_ctrl.v:196.32-196.64" *)
  wire _050_;
  (* src = "config_ctrl.v:196.69-196.101" *)
  wire _051_;
  (* src = "config_ctrl.v:196.107-196.139" *)
  wire _052_;
  (* src = "config_ctrl.v:196.145-196.177" *)
  wire _053_;
  (* src = "config_ctrl.v:196.183-196.215" *)
  wire _054_;
  (* src = "config_ctrl.v:196.256-196.288" *)
  wire _055_;
  (* src = "config_ctrl.v:197.30-197.61" *)
  wire [31:0] _056_;
  (* src = "config_ctrl.v:197.66-197.97" *)
  wire [31:0] _057_;
  (* src = "config_ctrl.v:197.103-197.134" *)
  wire [31:0] _058_;
  (* src = "config_ctrl.v:197.140-197.171" *)
  wire [31:0] _059_;
  (* src = "config_ctrl.v:197.177-197.208" *)
  wire [31:0] _060_;
  (* src = "config_ctrl.v:197.214-197.242" *)
  wire [31:0] _061_;
  (* src = "config_ctrl.v:198.31-198.62" *)
  wire _062_;
  (* src = "config_ctrl.v:198.67-198.98" *)
  wire _063_;
  (* src = "config_ctrl.v:198.104-198.135" *)
  wire _064_;
  (* src = "config_ctrl.v:198.141-198.172" *)
  wire _065_;
  (* src = "config_ctrl.v:198.178-198.209" *)
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  (* src = "config_ctrl.v:267.24-267.61" *)
  wire _126_;
  (* src = "config_ctrl.v:268.24-268.61" *)
  wire _127_;
  (* src = "config_ctrl.v:269.24-269.61" *)
  wire _128_;
  (* src = "config_ctrl.v:270.24-270.61" *)
  wire _129_;
  (* src = "config_ctrl.v:271.24-271.61" *)
  wire _130_;
  (* src = "config_ctrl.v:272.19-272.56" *)
  wire _131_;
  (* src = "config_ctrl.v:564.9-564.36" *)
  wire _132_;
  (* src = "config_ctrl.v:273.24-273.61" *)
  wire _133_;
  (* src = "config_ctrl.v:273.67-273.104" *)
  wire _134_;
  (* src = "config_ctrl.v:273.23-273.106" *)
  wire _135_;
  (* src = "config_ctrl.v:300.12-300.30" *)
  wire _136_;
  (* src = "config_ctrl.v:370.11-370.46" *)
  wire _137_;
  (* src = "config_ctrl.v:465.11-465.47" *)
  wire _138_;
  (* src = "config_ctrl.v:483.11-483.40" *)
  wire _139_;
  (* src = "config_ctrl.v:519.11-519.40" *)
  wire _140_;
  (* src = "config_ctrl.v:563.9-563.40" *)
  wire _141_;
  (* src = "config_ctrl.v:564.9-564.59" *)
  wire _142_;
  (* src = "config_ctrl.v:465.28-465.47" *)
  wire _143_;
  (* src = "config_ctrl.v:194.31-194.102" *)
  wire _144_;
  (* src = "config_ctrl.v:194.30-194.140" *)
  wire _145_;
  (* src = "config_ctrl.v:194.29-194.178" *)
  wire _146_;
  (* src = "config_ctrl.v:194.28-194.216" *)
  wire _147_;
  (* src = "config_ctrl.v:194.27-194.251" *)
  wire _148_;
  (* src = "config_ctrl.v:195.30-195.99" *)
  wire _149_;
  (* src = "config_ctrl.v:195.29-195.136" *)
  wire _150_;
  (* src = "config_ctrl.v:195.28-195.173" *)
  wire _151_;
  (* src = "config_ctrl.v:195.27-195.210" *)
  wire _152_;
  (* src = "config_ctrl.v:195.26-195.244" *)
  wire _153_;
  (* src = "config_ctrl.v:196.31-196.102" *)
  wire _154_;
  (* src = "config_ctrl.v:196.30-196.140" *)
  wire _155_;
  (* src = "config_ctrl.v:196.29-196.178" *)
  wire _156_;
  (* src = "config_ctrl.v:196.28-196.216" *)
  wire _157_;
  (* src = "config_ctrl.v:196.27-196.251" *)
  wire _158_;
  (* src = "config_ctrl.v:197.29-197.98" *)
  wire [31:0] _159_;
  (* src = "config_ctrl.v:197.28-197.135" *)
  wire [31:0] _160_;
  (* src = "config_ctrl.v:197.27-197.172" *)
  wire [31:0] _161_;
  (* src = "config_ctrl.v:197.26-197.209" *)
  wire [31:0] _162_;
  (* src = "config_ctrl.v:197.25-197.243" *)
  wire [31:0] _163_;
  (* src = "config_ctrl.v:198.30-198.99" *)
  wire _164_;
  (* src = "config_ctrl.v:198.29-198.136" *)
  wire _165_;
  (* src = "config_ctrl.v:198.28-198.173" *)
  wire _166_;
  (* src = "config_ctrl.v:198.27-198.210" *)
  wire _167_;
  (* src = "config_ctrl.v:198.26-198.244" *)
  wire _168_;
  wire _169_;
  wire [31:0] _170_;
  wire [31:0] _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire [14:0] _178_;
  wire [14:0] _179_;
  wire [14:0] _180_;
  wire [14:0] _181_;
  wire _182_;
  wire _183_;
  wire [2:0] _184_;
  wire [2:0] _185_;
  wire [2:0] _186_;
  wire [2:0] _187_;
  wire _188_;
  wire [2:0] _189_;
  wire [2:0] _190_;
  wire _191_;
  wire [2:0] _192_;
  wire [2:0] _193_;
  wire [31:0] _194_;
  wire [31:0] _195_;
  wire [31:0] _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire [31:0] _202_;
  wire [31:0] _203_;
  wire [31:0] _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire [31:0] _226_;
  wire [31:0] _227_;
  wire [31:0] _228_;
  wire [31:0] _229_;
  wire [31:0] _230_;
  wire [31:0] _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire [2:0] _237_;
  wire [2:0] _238_;
  wire [2:0] _239_;
  wire [2:0] _240_;
  wire [2:0] _241_;
  wire [2:0] _242_;
  wire [31:0] _243_;
  wire [31:0] _244_;
  wire _245_;
  wire [31:0] _246_;
  wire [31:0] _247_;
  wire [31:0] _248_;
  wire [31:0] _249_;
  wire [31:0] _250_;
  wire [31:0] _251_;
  wire [31:0] _252_;
  wire [31:0] _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire [14:0] _264_;
  wire [14:0] _265_;
  wire [14:0] _266_;
  wire [14:0] _267_;
  wire _268_;
  wire _269_;
  wire [3:0] _270_;
  wire [3:0] _271_;
  wire [3:0] _272_;
  wire [3:0] _273_;
  wire [31:0] _274_;
  wire [31:0] _275_;
  (* src = "config_ctrl.v:233.24-233.46" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _276_;
  (* src = "config_ctrl.v:234.23-234.44" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _277_;
  (* src = "config_ctrl.v:15.23-15.36" *)
  input [31:0] aa_cfg_araddr;
  wire [31:0] aa_cfg_araddr;
  (* src = "config_ctrl.v:21.23-21.37" *)
  output aa_cfg_arready;
  wire aa_cfg_arready;
  (* src = "config_ctrl.v:154.6-154.22" *)
  reg aa_cfg_arready_o = 1'h0;
  (* src = "config_ctrl.v:14.23-14.37" *)
  input aa_cfg_arvalid;
  wire aa_cfg_arvalid;
  (* src = "config_ctrl.v:10.23-10.36" *)
  input [31:0] aa_cfg_awaddr;
  wire [31:0] aa_cfg_awaddr;
  (* src = "config_ctrl.v:19.23-19.37" *)
  output aa_cfg_awready;
  wire aa_cfg_awready;
  (* src = "config_ctrl.v:152.6-152.22" *)
  reg aa_cfg_awready_o = 1'h0;
  (* src = "config_ctrl.v:9.23-9.37" *)
  input aa_cfg_awvalid;
  wire aa_cfg_awvalid;
  (* src = "config_ctrl.v:17.23-17.35" *)
  output [31:0] aa_cfg_rdata;
  wire [31:0] aa_cfg_rdata;
  (* src = "config_ctrl.v:150.14-150.28" *)
  reg [31:0] aa_cfg_rdata_o = 32'd0;
  (* src = "config_ctrl.v:16.23-16.36" *)
  input aa_cfg_rready;
  wire aa_cfg_rready;
  (* src = "config_ctrl.v:18.23-18.36" *)
  output aa_cfg_rvalid;
  wire aa_cfg_rvalid;
  (* src = "config_ctrl.v:151.6-151.21" *)
  reg aa_cfg_rvalid_o = 1'h0;
  (* src = "config_ctrl.v:12.23-12.35" *)
  input [31:0] aa_cfg_wdata;
  wire [31:0] aa_cfg_wdata;
  (* src = "config_ctrl.v:20.23-20.36" *)
  output aa_cfg_wready;
  wire aa_cfg_wready;
  (* src = "config_ctrl.v:153.6-153.21" *)
  reg aa_cfg_wready_o = 1'h0;
  (* src = "config_ctrl.v:13.23-13.35" *)
  input [3:0] aa_cfg_wstrb;
  wire [3:0] aa_cfg_wstrb;
  (* src = "config_ctrl.v:11.23-11.36" *)
  input aa_cfg_wvalid;
  wire aa_cfg_wvalid;
  (* src = "config_ctrl.v:57.23-57.33" *)
  output [14:0] axi_araddr;
  wire [14:0] axi_araddr;
  (* src = "config_ctrl.v:162.14-162.26" *)
  reg [14:0] axi_araddr_o = 15'h0000;
  (* src = "config_ctrl.v:43.23-43.35" *)
  input axi_arready0;
  wire axi_arready0;
  (* src = "config_ctrl.v:28.23-28.35" *)
  input axi_arready1;
  wire axi_arready1;
  (* src = "config_ctrl.v:48.23-48.35" *)
  input axi_arready2;
  wire axi_arready2;
  (* src = "config_ctrl.v:38.23-38.35" *)
  input axi_arready3;
  wire axi_arready3;
  (* src = "config_ctrl.v:33.23-33.35" *)
  input axi_arready4;
  wire axi_arready4;
  (* src = "config_ctrl.v:143.7-143.19" *)
  wire axi_arready5;
  (* src = "config_ctrl.v:56.23-56.34" *)
  output axi_arvalid;
  wire axi_arvalid;
  (* src = "config_ctrl.v:161.6-161.19" *)
  reg axi_arvalid_o = 1'h0;
  (* src = "config_ctrl.v:52.23-52.33" *)
  output [14:0] axi_awaddr;
  wire [14:0] axi_awaddr;
  (* src = "config_ctrl.v:157.14-157.26" *)
  reg [14:0] axi_awaddr_o = 15'h0000;
  (* src = "config_ctrl.v:41.23-41.35" *)
  input axi_awready0;
  wire axi_awready0;
  (* src = "config_ctrl.v:27.23-27.35" *)
  input axi_awready1;
  wire axi_awready1;
  (* src = "config_ctrl.v:46.23-46.35" *)
  input axi_awready2;
  wire axi_awready2;
  (* src = "config_ctrl.v:36.23-36.35" *)
  input axi_awready3;
  wire axi_awready3;
  (* src = "config_ctrl.v:31.23-31.35" *)
  input axi_awready4;
  wire axi_awready4;
  (* src = "config_ctrl.v:141.7-141.19" *)
  wire axi_awready5;
  (* src = "config_ctrl.v:51.23-51.34" *)
  output axi_awvalid;
  wire axi_awvalid;
  (* src = "config_ctrl.v:156.6-156.19" *)
  reg axi_awvalid_o = 1'h0;
  (* src = "config_ctrl.v:88.23-88.30" *)
  input axi_clk;
  wire axi_clk;
  (* src = "config_ctrl.v:116.6-116.21" *)
  reg axi_grant_o_reg = 1'h0;
  (* src = "config_ctrl.v:44.23-44.33" *)
  input [31:0] axi_rdata0;
  wire [31:0] axi_rdata0;
  (* src = "config_ctrl.v:29.23-29.33" *)
  input [31:0] axi_rdata1;
  wire [31:0] axi_rdata1;
  (* src = "config_ctrl.v:49.23-49.33" *)
  input [31:0] axi_rdata2;
  wire [31:0] axi_rdata2;
  (* src = "config_ctrl.v:39.23-39.33" *)
  input [31:0] axi_rdata3;
  wire [31:0] axi_rdata3;
  (* src = "config_ctrl.v:34.23-34.33" *)
  input [31:0] axi_rdata4;
  wire [31:0] axi_rdata4;
  (* src = "config_ctrl.v:144.15-144.25" *)
  wire [31:0] axi_rdata5;
  (* src = "config_ctrl.v:89.23-89.34" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "config_ctrl.v:58.23-58.33" *)
  output axi_rready;
  wire axi_rready;
  (* src = "config_ctrl.v:163.6-163.18" *)
  reg axi_rready_o = 1'h0;
  (* src = "config_ctrl.v:45.23-45.34" *)
  input axi_rvalid0;
  wire axi_rvalid0;
  (* src = "config_ctrl.v:30.23-30.34" *)
  input axi_rvalid1;
  wire axi_rvalid1;
  (* src = "config_ctrl.v:50.23-50.34" *)
  input axi_rvalid2;
  wire axi_rvalid2;
  (* src = "config_ctrl.v:40.23-40.34" *)
  input axi_rvalid3;
  wire axi_rvalid3;
  (* src = "config_ctrl.v:35.23-35.34" *)
  input axi_rvalid4;
  wire axi_rvalid4;
  (* src = "config_ctrl.v:145.7-145.18" *)
  wire axi_rvalid5;
  (* src = "config_ctrl.v:54.23-54.32" *)
  output [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "config_ctrl.v:159.14-159.25" *)
  reg [31:0] axi_wdata_o = 32'd0;
  (* src = "config_ctrl.v:42.23-42.34" *)
  input axi_wready0;
  wire axi_wready0;
  (* src = "config_ctrl.v:26.23-26.34" *)
  input axi_wready1;
  wire axi_wready1;
  (* src = "config_ctrl.v:47.23-47.34" *)
  input axi_wready2;
  wire axi_wready2;
  (* src = "config_ctrl.v:37.23-37.34" *)
  input axi_wready3;
  wire axi_wready3;
  (* src = "config_ctrl.v:32.23-32.34" *)
  input axi_wready4;
  wire axi_wready4;
  (* src = "config_ctrl.v:142.7-142.18" *)
  wire axi_wready5;
  (* src = "config_ctrl.v:55.23-55.32" *)
  output [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "config_ctrl.v:160.13-160.24" *)
  reg [3:0] axi_wstrb_o = 4'h0;
  (* src = "config_ctrl.v:53.23-53.33" *)
  output axi_wvalid;
  wire axi_wvalid;
  (* src = "config_ctrl.v:158.6-158.18" *)
  reg axi_wvalid_o = 1'h0;
  (* src = "config_ctrl.v:63.23-63.35" *)
  output cc_aa_enable;
  wire cc_aa_enable;
  (* src = "config_ctrl.v:165.6-165.20" *)
  reg cc_aa_enable_o;
  (* src = "config_ctrl.v:64.23-64.35" *)
  output cc_as_enable;
  wire cc_as_enable;
  (* src = "config_ctrl.v:166.6-166.20" *)
  reg cc_as_enable_o;
  (* src = "config_ctrl.v:133.7-133.21" *)
  wire cc_axi_awvalid;
  (* src = "config_ctrl.v:134.7-134.20" *)
  wire cc_axi_wvalid;
  (* src = "config_ctrl.v:130.6-130.15" *)
  reg cc_enable;
  (* src = "config_ctrl.v:65.23-65.35" *)
  output cc_is_enable;
  wire cc_is_enable;
  (* src = "config_ctrl.v:167.6-167.20" *)
  reg cc_is_enable_o;
  (* src = "config_ctrl.v:66.23-66.35" *)
  output cc_la_enable;
  wire cc_la_enable;
  (* src = "config_ctrl.v:168.6-168.20" *)
  reg cc_la_enable_o;
  (* src = "config_ctrl.v:131.6-131.19" *)
  reg cc_sub_enable;
  (* src = "config_ctrl.v:67.23-67.35" *)
  output cc_up_enable;
  wire cc_up_enable;
  (* src = "config_ctrl.v:169.6-169.20" *)
  reg cc_up_enable_o;
  (* src = "config_ctrl.v:105.12-105.25" *)
  reg [2:0] f_axi_fsm_reg;
  (* src = "config_ctrl.v:112.13-112.24" *)
  reg [31:0] f_axi_rdata;
  (* src = "config_ctrl.v:106.6-106.19" *)
  reg f_axi_request;
  (* src = "config_ctrl.v:110.13-110.30" *)
  reg [31:0] f_axi_request_add;
  (* src = "config_ctrl.v:109.6-109.24" *)
  reg f_axi_request_done;
  (* src = "config_ctrl.v:107.6-107.22" *)
  reg f_axi_request_rw;
  (* src = "config_ctrl.v:111.13-111.24" *)
  reg [31:0] f_axi_wdata;
  (* src = "config_ctrl.v:108.12-108.23" *)
  reg [3:0] f_axi_wstrb;
  (* src = "config_ctrl.v:126.7-126.20" *)
  wire m_axi_arready;
  (* src = "config_ctrl.v:124.7-124.20" *)
  wire m_axi_awready;
  (* src = "config_ctrl.v:114.12-114.25" *)
  reg [2:0] m_axi_fsm_reg;
  (* src = "config_ctrl.v:127.14-127.25" *)
  wire [31:0] m_axi_rdata;
  (* src = "config_ctrl.v:117.7-117.20" *)
  wire m_axi_request;
  (* src = "config_ctrl.v:121.14-121.31" *)
  wire [31:0] m_axi_request_add;
  (* src = "config_ctrl.v:120.7-120.25" *)
  wire m_axi_request_done;
  (* src = "config_ctrl.v:118.7-118.23" *)
  wire m_axi_request_rw;
  (* src = "config_ctrl.v:128.7-128.19" *)
  wire m_axi_rvalid;
  (* src = "config_ctrl.v:122.14-122.25" *)
  wire [31:0] m_axi_wdata;
  (* src = "config_ctrl.v:125.7-125.19" *)
  wire m_axi_wready;
  (* src = "config_ctrl.v:119.13-119.24" *)
  wire [3:0] m_axi_wstrb;
  (* src = "config_ctrl.v:90.23-90.33" *)
  input uck2_rst_n;
  wire uck2_rst_n;
  (* src = "config_ctrl.v:87.23-87.34" *)
  input user_clock2;
  wire user_clock2;
  (* src = "config_ctrl.v:68.23-68.35" *)
  output [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  (* src = "config_ctrl.v:171.13-171.27" *)
  reg [4:0] user_prj_sel_o;
  (* src = "config_ctrl.v:103.13-103.25" *)
  reg [31:0] wb_axi_rdata;
  (* src = "config_ctrl.v:97.6-97.20" *)
  reg wb_axi_request;
  (* src = "config_ctrl.v:101.13-101.31" *)
  reg [31:0] wb_axi_request_add;
  (* src = "config_ctrl.v:100.6-100.25" *)
  reg wb_axi_request_done;
  (* src = "config_ctrl.v:98.6-98.23" *)
  reg wb_axi_request_rw;
  (* src = "config_ctrl.v:102.13-102.25" *)
  reg [31:0] wb_axi_wdata;
  (* src = "config_ctrl.v:99.12-99.24" *)
  reg [3:0] wb_axi_wstrb;
  (* src = "config_ctrl.v:74.23-74.29" *)
  input wb_clk;
  wire wb_clk;
  (* src = "config_ctrl.v:96.6-96.16" *)
  reg wb_fsm_reg;
  (* src = "config_ctrl.v:73.23-73.29" *)
  input wb_rst;
  wire wb_rst;
  (* src = "config_ctrl.v:81.23-81.30" *)
  output wbs_ack;
  wire wbs_ack;
  (* src = "config_ctrl.v:173.6-173.15" *)
  reg wbs_ack_o;
  (* src = "config_ctrl.v:75.23-75.30" *)
  input [31:0] wbs_adr;
  wire [31:0] wbs_adr;
  (* src = "config_ctrl.v:78.23-78.30" *)
  input wbs_cyc;
  wire wbs_cyc;
  (* src = "config_ctrl.v:82.23-82.32" *)
  output [31:0] wbs_rdata;
  wire [31:0] wbs_rdata;
  (* src = "config_ctrl.v:174.14-174.25" *)
  reg [31:0] wbs_rdata_o;
  (* src = "config_ctrl.v:77.23-77.30" *)
  input [3:0] wbs_sel;
  wire [3:0] wbs_sel;
  (* src = "config_ctrl.v:79.23-79.30" *)
  input wbs_stb;
  wire wbs_stb;
  (* src = "config_ctrl.v:76.23-76.32" *)
  input [31:0] wbs_wdata;
  wire [31:0] wbs_wdata;
  (* src = "config_ctrl.v:80.23-80.29" *)
  input wbs_we;
  wire wbs_we;
  assign _036_ = cc_up_enable_o & (* src = "config_ctrl.v:194.32-194.64" *) axi_awready2;
  assign _037_ = cc_la_enable_o & (* src = "config_ctrl.v:194.69-194.101" *) axi_awready0;
  assign _038_ = cc_aa_enable_o & (* src = "config_ctrl.v:194.107-194.139" *) axi_awready1;
  assign _039_ = cc_is_enable_o & (* src = "config_ctrl.v:194.145-194.177" *) axi_awready3;
  assign _040_ = cc_as_enable_o & (* src = "config_ctrl.v:194.183-194.215" *) axi_awready4;
  assign _041_ = cc_enable & (* src = "config_ctrl.v:194.221-194.250" *) axi_awready5;
  assign _042_ = cc_sub_enable & (* src = "config_ctrl.v:194.256-194.288" *) axi_awvalid_o;
  assign _043_ = cc_up_enable_o & (* src = "config_ctrl.v:195.31-195.62" *) axi_wready2;
  assign _044_ = cc_la_enable_o & (* src = "config_ctrl.v:195.67-195.98" *) axi_wready0;
  assign _045_ = cc_aa_enable_o & (* src = "config_ctrl.v:195.104-195.135" *) axi_wready1;
  assign _046_ = cc_is_enable_o & (* src = "config_ctrl.v:195.141-195.172" *) axi_wready3;
  assign _047_ = cc_as_enable_o & (* src = "config_ctrl.v:195.178-195.209" *) axi_wready4;
  assign _048_ = cc_enable & (* src = "config_ctrl.v:195.215-195.243" *) axi_wready5;
  assign _049_ = cc_sub_enable & (* src = "config_ctrl.v:195.249-195.280" *) axi_wvalid_o;
  assign _050_ = cc_up_enable_o & (* src = "config_ctrl.v:196.32-196.64" *) axi_arready2;
  assign _051_ = cc_la_enable_o & (* src = "config_ctrl.v:196.69-196.101" *) axi_arready0;
  assign _052_ = cc_aa_enable_o & (* src = "config_ctrl.v:196.107-196.139" *) axi_arready1;
  assign _053_ = cc_is_enable_o & (* src = "config_ctrl.v:196.145-196.177" *) axi_arready3;
  assign _054_ = cc_as_enable_o & (* src = "config_ctrl.v:196.183-196.215" *) axi_arready4;
  assign _056_ = { cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o, cc_up_enable_o } & (* src = "config_ctrl.v:197.30-197.61" *) axi_rdata2;
  assign _057_ = { cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o, cc_la_enable_o } & (* src = "config_ctrl.v:197.66-197.97" *) axi_rdata0;
  assign _058_ = { cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o, cc_aa_enable_o } & (* src = "config_ctrl.v:197.103-197.134" *) axi_rdata1;
  assign _059_ = { cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o, cc_is_enable_o } & (* src = "config_ctrl.v:197.140-197.171" *) axi_rdata3;
  assign _060_ = { cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o, cc_as_enable_o } & (* src = "config_ctrl.v:197.177-197.208" *) axi_rdata4;
  assign _061_ = { cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable, cc_enable } & (* src = "config_ctrl.v:197.214-197.242" *) { 27'h0000000, user_prj_sel_o };
  assign _062_ = cc_up_enable_o & (* src = "config_ctrl.v:198.31-198.62" *) axi_rvalid2;
  assign _063_ = cc_la_enable_o & (* src = "config_ctrl.v:198.67-198.98" *) axi_rvalid0;
  assign _064_ = cc_aa_enable_o & (* src = "config_ctrl.v:198.104-198.135" *) axi_rvalid1;
  assign _065_ = cc_is_enable_o & (* src = "config_ctrl.v:198.141-198.172" *) axi_rvalid3;
  assign _066_ = cc_as_enable_o & (* src = "config_ctrl.v:198.178-198.209" *) axi_rvalid4;
  assign _055_ = cc_sub_enable & (* src = "config_ctrl.v:198.249-198.281" *) axi_arvalid_o;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wbs_ack_o <= 1'h0;
    else if (_067_) wbs_ack_o <= _034_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wbs_rdata_o <= 32'd0;
    else if (_102_) wbs_rdata_o <= _035_;
  (* src = "config_ctrl.v:558.2-572.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) user_prj_sel_o <= 5'h00;
    else if (_103_) user_prj_sel_o <= axi_wdata_o[4:0];
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) wb_axi_request_done <= 1'h0;
    else if (_104_) wb_axi_request_done <= _031_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) wb_axi_rdata <= 32'd0;
    else if (_105_) wb_axi_rdata <= _028_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_axi_request_add <= 32'd0;
    else if (_106_) wb_axi_request_add <= _030_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_request_done <= 1'h0;
    else if (_104_) f_axi_request_done <= _025_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_rdata <= 32'd0;
    else if (_105_) f_axi_rdata <= _022_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) m_axi_fsm_reg <= 3'h0;
    else if (_107_) m_axi_fsm_reg <= _027_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_awvalid_o <= 1'h0;
    else if (_108_) axi_awvalid_o <= _008_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_awaddr_o <= 15'h0000;
    else if (_108_) axi_awaddr_o <= _007_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_wvalid_o <= 1'h0;
    else if (_109_) axi_wvalid_o <= _013_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_axi_wdata <= 32'd0;
    else if (_110_) wb_axi_wdata <= _032_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_wdata_o <= 32'd0;
    else if (_109_) axi_wdata_o <= _011_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_wstrb_o <= 4'h0;
    else if (_109_) axi_wstrb_o <= _012_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_arvalid_o <= 1'h0;
    else if (_111_) axi_arvalid_o <= _006_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_araddr_o <= 15'h0000;
    else if (_111_) axi_araddr_o <= _005_;
  (* src = "config_ctrl.v:440.2-553.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) axi_rready_o <= 1'h0;
    else if (_112_) axi_rready_o <= _010_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_fsm_reg <= 3'h0;
    else if (_113_) f_axi_fsm_reg <= _021_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_request <= 1'h0;
    else if (_114_) f_axi_request <= _023_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_request_rw <= 1'h0;
    else if (_115_) f_axi_request_rw <= _026_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_wstrb <= 4'h0;
    else if (_116_) f_axi_wstrb <= aa_cfg_wstrb;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_request_add <= 32'd0;
    else if (_117_) f_axi_request_add <= _024_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) f_axi_wdata <= 32'd0;
    else if (_116_) f_axi_wdata <= aa_cfg_wdata;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) aa_cfg_rdata_o <= 32'd0;
    else if (_118_) aa_cfg_rdata_o <= _002_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) aa_cfg_rvalid_o <= 1'h0;
    else if (_118_) aa_cfg_rvalid_o <= _003_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) aa_cfg_awready_o <= 1'h0;
    else if (_119_) aa_cfg_awready_o <= _001_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) aa_cfg_wready_o <= 1'h0;
    else if (_120_) aa_cfg_wready_o <= _004_;
  (* src = "config_ctrl.v:333.2-408.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) aa_cfg_arready_o <= 1'h0;
    else if (_121_) aa_cfg_arready_o <= _000_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_axi_request <= 1'h0;
    else if (_106_) wb_axi_request <= _029_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_axi_request_rw <= 1'h0;
    else if (_122_) wb_axi_request_rw <= wbs_we;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_axi_wstrb <= 4'h0;
    else if (_123_) wb_axi_wstrb <= wbs_sel;
  assign _067_ = { wb_axi_request_done, wb_fsm_reg } != 2'h1;
  assign _068_ = { wb_axi_request_done, wb_axi_request_rw, wb_fsm_reg } != 3'h7;
  assign _069_ = | { _191_, _172_, _174_, _169_, _188_ };
  assign _070_ = { m_axi_rvalid, _188_ } != 2'h1;
  assign _071_ = { _140_, _169_ } != 2'h1;
  assign _072_ = { m_axi_wready, _174_ } != 2'h1;
  assign _073_ = { _191_, _139_ } != 2'h2;
  assign _074_ = | { _191_, _188_ };
  assign _075_ = { _124_, _136_, wbs_ack_o } != 3'h4;
  assign _076_ = { _124_, wbs_ack_o } != 2'h3;
  assign _077_ = { _140_, m_axi_awready, _169_ } != 3'h1;
  assign _078_ = { _191_, _139_, m_axi_arready } != 3'h4;
  assign _079_ = { _172_, _138_ } != 2'h2;
  assign _080_ = | { _172_, _169_ };
  assign _081_ = { _172_, _138_, m_axi_request_rw } != 3'h6;
  assign _082_ = | { _172_, _174_, _169_ };
  assign _083_ = { _124_, _136_, wbs_ack_o, wbs_we } != 4'hc;
  assign _084_ = { wb_axi_request_done, wb_axi_request_rw, wb_fsm_reg } != 3'h5;
  assign _085_ = { _172_, _138_, m_axi_request_rw } != 3'h7;
  assign _086_ = | { _191_, _172_ };
  assign _087_ = | { _191_, _172_, _188_ };
  assign _088_ = { _218_, aa_cfg_arvalid, aa_cfg_awvalid } != 3'h4;
  assign _089_ = { _221_, aa_cfg_wvalid } != 2'h2;
  assign _090_ = { _224_, aa_cfg_rready } != 2'h2;
  assign _091_ = { _220_, f_axi_request_done } != 2'h2;
  assign _092_ = | { _220_, _221_, _224_, _215_, _218_ };
  assign _093_ = { _137_, _215_ } != 2'h1;
  assign _094_ = { _218_, aa_cfg_awvalid } != 2'h3;
  assign _095_ = | { _220_, _221_, _215_, _218_ };
  assign _096_ = | { _221_, _218_ };
  assign _097_ = | { _220_, _215_, _218_ };
  assign _098_ = | { _224_, _215_ };
  assign _099_ = { _218_, aa_cfg_awvalid } != 2'h2;
  assign _100_ = | { _220_, _218_ };
  assign _101_ = | { _215_, _218_ };
  assign _124_ = ~ wb_fsm_reg;
  assign _125_ = ~ wbs_ack_o;
  assign _102_ = & { _068_, _067_ };
  assign _103_ = & { _142_, _141_ };
  assign _104_ = & { _069_, _070_, _071_, _072_, _073_ };
  assign _105_ = & { _070_, _073_, _074_ };
  assign _106_ = & { _067_, _076_, _075_ };
  assign _107_ = & { _078_, _077_, _079_, _069_, _070_, _072_ };
  assign _108_ = & { _081_, _080_, _077_, _079_ };
  assign _109_ = & { _081_, _082_, _079_, _071_, _072_ };
  assign _110_ = & { _084_, _083_, _067_, _076_, _075_ };
  assign _111_ = & { _086_, _085_, _078_, _079_ };
  assign _112_ = & { _087_, _085_, _079_, _070_, _073_ };
  assign _113_ = & { _091_, _090_, _089_, _088_, _093_, _092_ };
  assign _114_ = & { _095_, _094_, _091_, _089_, _088_, _093_ };
  assign _115_ = & { _096_, _094_, _089_, _088_ };
  assign _116_ = & { _221_, aa_cfg_wvalid };
  assign _117_ = & { _097_, _091_, _088_, _093_ };
  assign _118_ = & { _098_, _090_, _093_ };
  assign _119_ = & { _099_, _096_ };
  assign _120_ = & { _100_, _091_ };
  assign _121_ = & { _101_, _094_, _088_ };
  assign _122_ = & { _125_, _124_, _136_ };
  assign _123_ = & { _125_, _124_, _136_, wbs_we };
  assign _126_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:267.24-267.61" *) 20'h30002;
  assign _127_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:268.24-268.61" *) 20'h30004;
  assign _128_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:269.24-269.61" *) 20'h30003;
  assign _129_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:270.24-270.61" *) 20'h30001;
  assign _130_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:271.24-271.61" *) 20'h30000;
  assign _131_ = m_axi_request_add[31:12] == (* src = "config_ctrl.v:272.19-272.56" *) 20'h30005;
  assign _132_ = ! (* src = "config_ctrl.v:564.9-564.36" *) axi_awaddr_o[11:0];
  assign _133_ = m_axi_request_add[31:12] >= (* src = "config_ctrl.v:273.24-273.61" *) 20'h30006;
  assign _134_ = m_axi_request_add[31:12] <= (* src = "config_ctrl.v:273.67-273.104" *) 20'h3ffff;
  assign cc_axi_awvalid = axi_awvalid_o && (* src = "config_ctrl.v:201.26-201.50" *) cc_enable;
  assign cc_axi_wvalid = axi_wvalid_o && (* src = "config_ctrl.v:202.25-202.48" *) cc_enable;
  assign _135_ = _133_ && (* src = "config_ctrl.v:273.23-273.106" *) _134_;
  assign _136_ = wbs_cyc && (* src = "config_ctrl.v:300.12-300.30" *) wbs_stb;
  assign _137_ = aa_cfg_rready && (* src = "config_ctrl.v:370.11-370.46" *) f_axi_request_done;
  assign _138_ = m_axi_request && (* src = "config_ctrl.v:465.11-465.47" *) _143_;
  assign _139_ = m_axi_arready && (* src = "config_ctrl.v:483.11-483.40" *) m_axi_rvalid;
  assign _140_ = m_axi_awready && (* src = "config_ctrl.v:519.11-519.40" *) m_axi_wready;
  assign _141_ = cc_axi_awvalid && (* src = "config_ctrl.v:563.9-563.40" *) cc_axi_wvalid;
  assign _142_ = _132_ && (* src = "config_ctrl.v:564.9-564.59" *) axi_wstrb_o[0];
  assign _143_ = ! (* src = "config_ctrl.v:465.28-465.47" *) m_axi_request_done;
  assign _144_ = _036_ | (* src = "config_ctrl.v:194.31-194.102" *) _037_;
  assign _145_ = _144_ | (* src = "config_ctrl.v:194.30-194.140" *) _038_;
  assign _146_ = _145_ | (* src = "config_ctrl.v:194.29-194.178" *) _039_;
  assign _147_ = _146_ | (* src = "config_ctrl.v:194.28-194.216" *) _040_;
  assign _148_ = _147_ | (* src = "config_ctrl.v:194.27-194.251" *) _041_;
  assign m_axi_awready = _148_ | (* src = "config_ctrl.v:194.26-194.289" *) _042_;
  assign _149_ = _043_ | (* src = "config_ctrl.v:195.30-195.99" *) _044_;
  assign _150_ = _149_ | (* src = "config_ctrl.v:195.29-195.136" *) _045_;
  assign _151_ = _150_ | (* src = "config_ctrl.v:195.28-195.173" *) _046_;
  assign _152_ = _151_ | (* src = "config_ctrl.v:195.27-195.210" *) _047_;
  assign _153_ = _152_ | (* src = "config_ctrl.v:195.26-195.244" *) _048_;
  assign m_axi_wready = _153_ | (* src = "config_ctrl.v:195.25-195.281" *) _049_;
  assign _154_ = _050_ | (* src = "config_ctrl.v:196.31-196.102" *) _051_;
  assign _155_ = _154_ | (* src = "config_ctrl.v:196.30-196.140" *) _052_;
  assign _156_ = _155_ | (* src = "config_ctrl.v:196.29-196.178" *) _053_;
  assign _157_ = _156_ | (* src = "config_ctrl.v:196.28-196.216" *) _054_;
  assign _158_ = _157_ | (* src = "config_ctrl.v:196.27-196.251" *) cc_enable;
  assign m_axi_arready = _158_ | (* src = "config_ctrl.v:196.26-196.289" *) _055_;
  assign _159_ = _056_ | (* src = "config_ctrl.v:197.29-197.98" *) _057_;
  assign _160_ = _159_ | (* src = "config_ctrl.v:197.28-197.135" *) _058_;
  assign _161_ = _160_ | (* src = "config_ctrl.v:197.27-197.172" *) _059_;
  assign _162_ = _161_ | (* src = "config_ctrl.v:197.26-197.209" *) _060_;
  assign _163_ = _162_ | (* src = "config_ctrl.v:197.25-197.243" *) _061_;
  assign m_axi_rdata = _163_ | (* src = "config_ctrl.v:197.24-197.283" *) { cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable, cc_sub_enable };
  assign _164_ = _062_ | (* src = "config_ctrl.v:198.30-198.99" *) _063_;
  assign _165_ = _164_ | (* src = "config_ctrl.v:198.29-198.136" *) _064_;
  assign _166_ = _165_ | (* src = "config_ctrl.v:198.28-198.173" *) _065_;
  assign _167_ = _166_ | (* src = "config_ctrl.v:198.27-198.210" *) _066_;
  assign _168_ = _167_ | (* src = "config_ctrl.v:198.26-198.244" *) cc_enable;
  assign m_axi_rvalid = _168_ | (* src = "config_ctrl.v:198.25-198.282" *) _055_;
  (* src = "config_ctrl.v:413.2-435.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) axi_grant_o_reg <= 1'h0;
    else axi_grant_o_reg <= _009_;
  (* src = "config_ctrl.v:279.2-328.5" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) wb_fsm_reg <= 1'h0;
    else wb_fsm_reg <= _033_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_enable <= 1'h0;
    else cc_enable <= _016_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_sub_enable <= 1'h0;
    else cc_sub_enable <= _019_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_aa_enable_o <= 1'h0;
    else cc_aa_enable_o <= _014_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_as_enable_o <= 1'h0;
    else cc_as_enable_o <= _015_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_is_enable_o <= 1'h0;
    else cc_is_enable_o <= _017_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_la_enable_o <= 1'h0;
    else cc_la_enable_o <= _018_;
  (* src = "config_ctrl.v:254.2-275.5" *)
  always @(posedge axi_clk, negedge axi_reset_n)
    if (!axi_reset_n) cc_up_enable_o <= 1'h0;
    else cc_up_enable_o <= _020_;
  assign _170_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) m_axi_wdata : 32'hxxxxxxxx;
  assign _171_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _170_ : 32'hxxxxxxxx;
  assign _173_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) 1'h0 : 1'hx;
  function [0:0] _462_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _462_ = b[0:0];
      3'b?1?:
        _462_ = b[1:1];
      3'b1??:
        _462_ = b[2:2];
      default:
        _462_ = a;
    endcase
  endfunction
  assign _013_ = _462_(1'hx, { _177_, _175_, _173_ }, { _172_, _169_, _174_ });
  assign _175_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 1'h0 : 1'hx;
  assign _176_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) 1'h1 : 1'hx;
  assign _177_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _176_ : 1'hx;
  assign _178_ = m_axi_awready ? (* src = "config_ctrl.v:531.12-531.25|config_ctrl.v:531.7-535.10" *) 15'h0000 : 15'hxxxx;
  assign _179_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 15'h0000 : _178_;
  function [14:0] _468_;
    input [14:0] a;
    input [29:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _468_ = b[14:0];
      2'b1?:
        _468_ = b[29:15];
      default:
        _468_ = a;
    endcase
  endfunction
  assign _007_ = _468_(15'hxxxx, { _181_, _179_ }, { _172_, _169_ });
  assign _180_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) m_axi_request_add[14:0] : 15'hxxxx;
  assign _181_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _180_ : 15'hxxxx;
  assign _182_ = m_axi_awready ? (* src = "config_ctrl.v:531.12-531.25|config_ctrl.v:531.7-535.10" *) 1'h0 : 1'hx;
  assign _183_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 1'h0 : _182_;
  function [0:0] _473_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _473_ = b[0:0];
      2'b1?:
        _473_ = b[1:1];
      default:
        _473_ = a;
    endcase
  endfunction
  assign _008_ = _473_(1'hx, { _177_, _183_ }, { _172_, _169_ });
  assign _184_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) 3'h0 : 3'hx;
  function [2:0] _475_;
    input [2:0] a;
    input [14:0] b;
    input [4:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _475_ = b[2:0];
      5'b???1?:
        _475_ = b[5:3];
      5'b??1??:
        _475_ = b[8:6];
      5'b?1???:
        _475_ = b[11:9];
      5'b1????:
        _475_ = b[14:12];
      default:
        _475_ = a;
    endcase
  endfunction
  assign _027_ = _475_(3'hx, { _193_, _190_, _187_, _186_, _184_ }, { _172_, _191_, _188_, _169_, _174_ });
  assign _185_ = m_axi_awready ? (* src = "config_ctrl.v:531.12-531.25|config_ctrl.v:531.7-535.10" *) 3'h4 : 3'hx;
  assign _186_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 3'h0 : _185_;
  assign _187_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) 3'h0 : 3'hx;
  assign _189_ = m_axi_arready ? (* src = "config_ctrl.v:496.20-496.33|config_ctrl.v:496.15-500.9" *) 3'h2 : 3'hx;
  assign _190_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) 3'h0 : _189_;
  assign _192_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) 3'h3 : 3'h1;
  assign _193_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _192_ : 3'hx;
  assign _195_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) _194_ : 32'hxxxxxxxx;
  function [31:0] _484_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _484_ = b[31:0];
      2'b1?:
        _484_ = b[63:32];
      default:
        _484_ = a;
    endcase
  endfunction
  assign _022_ = _484_(32'hxxxxxxxx, { _196_, _195_ }, { _191_, _188_ });
  assign _194_ = axi_grant_o_reg ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:487.12-487.27|config_ctrl.v:487.7-490.36" *) m_axi_rdata : f_axi_rdata;
  assign _196_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) _194_ : 32'hxxxxxxxx;
  assign _198_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) _197_ : 1'hx;
  function [0:0] _488_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _488_ = b[0:0];
      5'b???1?:
        _488_ = b[1:1];
      5'b??1??:
        _488_ = b[2:2];
      5'b?1???:
        _488_ = b[3:3];
      5'b1????:
        _488_ = b[4:4];
      default:
        _488_ = a;
    endcase
  endfunction
  assign _025_ = _488_(1'hx, { 1'h0, _201_, _200_, _199_, _198_ }, { _172_, _191_, _188_, _169_, _174_ });
  assign _199_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) _197_ : 1'hx;
  assign _200_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) _197_ : 1'hx;
  assign _197_ = axi_grant_o_reg ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:491.12-491.27|config_ctrl.v:491.7-494.36" *) 1'h1 : f_axi_request_done;
  assign _201_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) _197_ : 1'hx;
  assign _203_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) _202_ : 32'hxxxxxxxx;
  function [31:0] _494_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _494_ = b[31:0];
      2'b1?:
        _494_ = b[63:32];
      default:
        _494_ = a;
    endcase
  endfunction
  assign _028_ = _494_(32'hxxxxxxxx, { _204_, _203_ }, { _191_, _188_ });
  assign _202_ = axi_grant_o_reg ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:487.12-487.27|config_ctrl.v:487.7-490.36" *) wb_axi_rdata : m_axi_rdata;
  assign _204_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) _202_ : 32'hxxxxxxxx;
  assign _206_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) _205_ : 1'hx;
  function [0:0] _498_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _498_ = b[0:0];
      5'b???1?:
        _498_ = b[1:1];
      5'b??1??:
        _498_ = b[2:2];
      5'b?1???:
        _498_ = b[3:3];
      5'b1????:
        _498_ = b[4:4];
      default:
        _498_ = a;
    endcase
  endfunction
  assign _031_ = _498_(1'hx, { 1'h0, _209_, _208_, _207_, _206_ }, { _172_, _191_, _188_, _169_, _174_ });
  assign _174_ = m_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *) 3'h4;
  assign _207_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) _205_ : 1'hx;
  assign _169_ = m_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *) 3'h3;
  assign _208_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) _205_ : 1'hx;
  assign _188_ = m_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *) 3'h2;
  assign _205_ = axi_grant_o_reg ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:491.12-491.27|config_ctrl.v:491.7-494.36" *) wb_axi_request_done : 1'h1;
  assign _209_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) _205_ : 1'hx;
  assign _191_ = m_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *) 3'h1;
  assign _172_ = ! (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *) m_axi_fsm_reg;
  assign _210_ = wb_axi_request ? (* src = "config_ctrl.v:428.11-428.25|config_ctrl.v:428.7-430.10" *) 1'h0 : 1'h1;
  assign _211_ = f_axi_request ? (* src = "config_ctrl.v:427.10-427.26|config_ctrl.v:427.6-431.9" *) 1'h1 : _210_;
  function [0:0] _510_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:418.4-433.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _510_ = b[0:0];
      2'b1?:
        _510_ = b[1:1];
      default:
        _510_ = a;
    endcase
  endfunction
  assign _009_ = _510_(1'h0, { _213_, _211_ }, { _214_, axi_grant_o_reg });
  assign _212_ = f_axi_request ? (* src = "config_ctrl.v:421.11-421.24|config_ctrl.v:421.7-423.10" *) 1'h1 : 1'h0;
  assign _213_ = wb_axi_request ? (* src = "config_ctrl.v:420.10-420.27|config_ctrl.v:420.6-424.9" *) 1'h0 : _212_;
  assign _214_ = ~ (* full_case = 32'd1 *) (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:418.4-433.11" *) axi_grant_o_reg;
  function [0:0] _514_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _514_ = b[0:0];
      2'b1?:
        _514_ = b[1:1];
      default:
        _514_ = a;
    endcase
  endfunction
  assign _000_ = _514_(1'hx, { _217_, 1'h0 }, { _218_, _215_ });
  assign _216_ = aa_cfg_arvalid ? (* src = "config_ctrl.v:359.20-359.34|config_ctrl.v:359.15-365.9" *) 1'h1 : 1'hx;
  assign _217_ = aa_cfg_awvalid ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:355.11-355.25|config_ctrl.v:355.6-365.9" *) 1'hx : _216_;
  assign _219_ = f_axi_request_done ? (* src = "config_ctrl.v:399.11-399.29|config_ctrl.v:399.6-404.9" *) 1'h1 : 1'hx;
  function [0:0] _518_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _518_ = b[0:0];
      2'b1?:
        _518_ = b[1:1];
      default:
        _518_ = a;
    endcase
  endfunction
  assign _004_ = _518_(1'hx, { 1'h0, _219_ }, { _218_, _220_ });
  function [0:0] _519_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _519_ = b[0:0];
      2'b1?:
        _519_ = b[1:1];
      default:
        _519_ = a;
    endcase
  endfunction
  assign _001_ = _519_(1'hx, { _222_, 1'h0 }, { _218_, _221_ });
  assign _222_ = aa_cfg_awvalid ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:355.11-355.25|config_ctrl.v:355.6-365.9" *) 1'h1 : 1'hx;
  assign _223_ = aa_cfg_rready ? (* src = "config_ctrl.v:380.11-380.24|config_ctrl.v:380.6-384.9" *) 1'h0 : 1'hx;
  function [0:0] _522_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _522_ = b[0:0];
      2'b1?:
        _522_ = b[1:1];
      default:
        _522_ = a;
    endcase
  endfunction
  assign _003_ = _522_(1'hx, { _225_, _223_ }, { _215_, _224_ });
  assign _225_ = _137_ ? (* src = "config_ctrl.v:370.11-370.46|config_ctrl.v:370.6-376.9" *) 1'h1 : 1'hx;
  assign _226_ = aa_cfg_rready ? (* src = "config_ctrl.v:380.11-380.24|config_ctrl.v:380.6-384.9" *) 32'd0 : 32'hxxxxxxxx;
  function [31:0] _525_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _525_ = b[31:0];
      2'b1?:
        _525_ = b[63:32];
      default:
        _525_ = a;
    endcase
  endfunction
  assign _002_ = _525_(32'hxxxxxxxx, { _227_, _226_ }, { _215_, _224_ });
  assign _227_ = _137_ ? (* src = "config_ctrl.v:370.11-370.46|config_ctrl.v:370.6-376.9" *) f_axi_rdata : 32'hxxxxxxxx;
  assign _228_ = f_axi_request_done ? (* src = "config_ctrl.v:399.11-399.29|config_ctrl.v:399.6-404.9" *) 32'd0 : 32'hxxxxxxxx;
  function [31:0] _528_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _528_ = b[31:0];
      3'b?1?:
        _528_ = b[63:32];
      3'b1??:
        _528_ = b[95:64];
      default:
        _528_ = a;
    endcase
  endfunction
  assign _024_ = _528_(32'hxxxxxxxx, { _231_, _229_, _228_ }, { _218_, _215_, _220_ });
  assign _229_ = _137_ ? (* src = "config_ctrl.v:370.11-370.46|config_ctrl.v:370.6-376.9" *) 32'd0 : 32'hxxxxxxxx;
  assign _230_ = aa_cfg_arvalid ? (* src = "config_ctrl.v:359.20-359.34|config_ctrl.v:359.15-365.9" *) aa_cfg_araddr : 32'hxxxxxxxx;
  assign _231_ = aa_cfg_awvalid ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:355.11-355.25|config_ctrl.v:355.6-365.9" *) aa_cfg_awaddr : _230_;
  assign _232_ = aa_cfg_wvalid ? (* src = "config_ctrl.v:389.11-389.24|config_ctrl.v:389.6-395.9" *) 1'h1 : 1'hx;
  function [0:0] _533_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _533_ = b[0:0];
      2'b1?:
        _533_ = b[1:1];
      default:
        _533_ = a;
    endcase
  endfunction
  assign _026_ = _533_(1'hx, { _234_, _232_ }, { _218_, _221_ });
  assign _233_ = aa_cfg_arvalid ? (* src = "config_ctrl.v:359.20-359.34|config_ctrl.v:359.15-365.9" *) 1'h0 : 1'hx;
  assign _234_ = aa_cfg_awvalid ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:355.11-355.25|config_ctrl.v:355.6-365.9" *) 1'hx : _233_;
  assign _235_ = f_axi_request_done ? (* src = "config_ctrl.v:399.11-399.29|config_ctrl.v:399.6-404.9" *) 1'h0 : 1'hx;
  function [0:0] _537_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _537_ = b[0:0];
      4'b??1?:
        _537_ = b[1:1];
      4'b?1??:
        _537_ = b[2:2];
      4'b1???:
        _537_ = b[3:3];
      default:
        _537_ = a;
    endcase
  endfunction
  assign _023_ = _537_(1'hx, { _217_, _236_, _232_, _235_ }, { _218_, _215_, _221_, _220_ });
  assign _236_ = _137_ ? (* src = "config_ctrl.v:370.11-370.46|config_ctrl.v:370.6-376.9" *) 1'h0 : 1'hx;
  assign _237_ = f_axi_request_done ? (* src = "config_ctrl.v:399.11-399.29|config_ctrl.v:399.6-404.9" *) 3'h0 : 3'hx;
  function [2:0] _540_;
    input [2:0] a;
    input [14:0] b;
    input [4:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _540_ = b[2:0];
      5'b???1?:
        _540_ = b[5:3];
      5'b??1??:
        _540_ = b[8:6];
      5'b?1???:
        _540_ = b[11:9];
      5'b1????:
        _540_ = b[14:12];
      default:
        _540_ = a;
    endcase
  endfunction
  assign _021_ = _540_(3'hx, { _242_, _240_, _239_, _238_, _237_ }, { _218_, _215_, _224_, _221_, _220_ });
  assign _220_ = f_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *) 3'h4;
  assign _238_ = aa_cfg_wvalid ? (* src = "config_ctrl.v:389.11-389.24|config_ctrl.v:389.6-395.9" *) 3'h4 : 3'hx;
  assign _221_ = f_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *) 3'h3;
  assign _239_ = aa_cfg_rready ? (* src = "config_ctrl.v:380.11-380.24|config_ctrl.v:380.6-384.9" *) 3'h0 : 3'hx;
  assign _224_ = f_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *) 3'h2;
  assign _240_ = _137_ ? (* src = "config_ctrl.v:370.11-370.46|config_ctrl.v:370.6-376.9" *) 3'h2 : 3'hx;
  assign _215_ = f_axi_fsm_reg == (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *) 3'h1;
  assign _241_ = aa_cfg_arvalid ? (* src = "config_ctrl.v:359.20-359.34|config_ctrl.v:359.15-365.9" *) 3'h1 : 3'hx;
  assign _242_ = aa_cfg_awvalid ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:355.11-355.25|config_ctrl.v:355.6-365.9" *) 3'h3 : _241_;
  assign _218_ = ! (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:351.4-406.11" *) f_axi_fsm_reg;
  assign _243_ = wb_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:317.12-317.30|config_ctrl.v:317.7-320.30" *) 32'hxxxxxxxx : wb_axi_rdata;
  assign _244_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) _243_ : 32'hxxxxxxxx;
  function [31:0] _553_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _553_ = b[31:0];
      2'b1?:
        _553_ = b[63:32];
      default:
        _553_ = a;
    endcase
  endfunction
  assign _035_ = _553_(32'hxxxxxxxx, { 32'h00000000, _244_ }, { _124_, wb_fsm_reg });
  assign _245_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) 1'h1 : 1'hx;
  function [0:0] _555_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _555_ = b[0:0];
      2'b1?:
        _555_ = b[1:1];
      default:
        _555_ = a;
    endcase
  endfunction
  assign _034_ = _555_(1'hx, { 1'h0, _245_ }, { _124_, wb_fsm_reg });
  assign _246_ = wb_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:317.12-317.30|config_ctrl.v:317.7-320.30" *) 32'd0 : 32'hxxxxxxxx;
  assign _247_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) _246_ : 32'hxxxxxxxx;
  function [31:0] _558_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _558_ = b[31:0];
      2'b1?:
        _558_ = b[63:32];
      default:
        _558_ = a;
    endcase
  endfunction
  assign _032_ = _558_(32'hxxxxxxxx, { _250_, _247_ }, { _124_, wb_fsm_reg });
  assign _248_ = wbs_we ? (* src = "config_ctrl.v:304.13-304.19|config_ctrl.v:304.8-307.11" *) wbs_wdata : 32'hxxxxxxxx;
  assign _249_ = _136_ ? (* src = "config_ctrl.v:300.12-300.30|config_ctrl.v:300.7-309.10" *) _248_ : 32'hxxxxxxxx;
  assign _250_ = wbs_ack_o ? (* src = "config_ctrl.v:299.11-299.21|config_ctrl.v:299.6-310.9" *) 32'hxxxxxxxx : _249_;
  assign _251_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) 32'd0 : 32'hxxxxxxxx;
  function [31:0] _563_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _563_ = b[31:0];
      2'b1?:
        _563_ = b[63:32];
      default:
        _563_ = a;
    endcase
  endfunction
  assign _030_ = _563_(32'hxxxxxxxx, { _253_, _251_ }, { _124_, wb_fsm_reg });
  assign _252_ = _136_ ? (* src = "config_ctrl.v:300.12-300.30|config_ctrl.v:300.7-309.10" *) wbs_adr : 32'hxxxxxxxx;
  assign _253_ = wbs_ack_o ? (* src = "config_ctrl.v:299.11-299.21|config_ctrl.v:299.6-310.9" *) 32'hxxxxxxxx : _252_;
  assign _254_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) 1'h0 : 1'hx;
  function [0:0] _567_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _567_ = b[0:0];
      2'b1?:
        _567_ = b[1:1];
      default:
        _567_ = a;
    endcase
  endfunction
  assign _029_ = _567_(1'hx, { _256_, _254_ }, { _124_, wb_fsm_reg });
  assign _255_ = _136_ ? (* src = "config_ctrl.v:300.12-300.30|config_ctrl.v:300.7-309.10" *) 1'h1 : 1'hx;
  assign _256_ = wbs_ack_o ? (* src = "config_ctrl.v:299.11-299.21|config_ctrl.v:299.6-310.9" *) 1'hx : _255_;
  assign _257_ = wb_axi_request_done ? (* src = "config_ctrl.v:314.11-314.30|config_ctrl.v:314.6-324.9" *) 1'h0 : 1'h1;
  function [0:0] _571_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:294.4-326.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _571_ = b[0:0];
      2'b1?:
        _571_ = b[1:1];
      default:
        _571_ = a;
    endcase
  endfunction
  assign _033_ = _571_(1'h0, { _259_, _257_ }, { _124_, wb_fsm_reg });
  assign _258_ = _136_ ? (* src = "config_ctrl.v:300.12-300.30|config_ctrl.v:300.7-309.10" *) 1'h1 : 1'h0;
  assign _259_ = wbs_ack_o ? (* src = "config_ctrl.v:299.11-299.21|config_ctrl.v:299.6-310.9" *) 1'h0 : _258_;
  assign _260_ = m_axi_rvalid ? (* src = "config_ctrl.v:504.11-504.23|config_ctrl.v:504.6-515.9" *) 1'h0 : 1'hx;
  function [0:0] _575_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _575_ = b[0:0];
      3'b?1?:
        _575_ = b[1:1];
      3'b1??:
        _575_ = b[2:2];
      default:
        _575_ = a;
    endcase
  endfunction
  assign _010_ = _575_(1'hx, { _263_, _261_, _260_ }, { _172_, _191_, _188_ });
  assign _261_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) 1'h0 : 1'hx;
  assign _262_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) 1'hx : 1'h1;
  assign _263_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _262_ : 1'hx;
  assign _264_ = m_axi_arready ? (* src = "config_ctrl.v:496.20-496.33|config_ctrl.v:496.15-500.9" *) 15'h0000 : 15'hxxxx;
  assign _265_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) 15'h0000 : _264_;
  function [14:0] _581_;
    input [14:0] a;
    input [29:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _581_ = b[14:0];
      2'b1?:
        _581_ = b[29:15];
      default:
        _581_ = a;
    endcase
  endfunction
  assign _005_ = _581_(15'hxxxx, { _267_, _265_ }, { _172_, _191_ });
  assign _266_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) 15'hxxxx : m_axi_request_add[14:0];
  assign _267_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _266_ : 15'hxxxx;
  assign _268_ = m_axi_arready ? (* src = "config_ctrl.v:496.20-496.33|config_ctrl.v:496.15-500.9" *) 1'h0 : 1'hx;
  assign _269_ = _139_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:483.11-483.40|config_ctrl.v:483.6-500.9" *) 1'h0 : _268_;
  function [0:0] _586_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _586_ = b[0:0];
      2'b1?:
        _586_ = b[1:1];
      default:
        _586_ = a;
    endcase
  endfunction
  assign _006_ = _586_(1'hx, { _263_, _269_ }, { _172_, _191_ });
  assign _270_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) 4'h0 : 4'hx;
  function [3:0] _588_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _588_ = b[3:0];
      3'b?1?:
        _588_ = b[7:4];
      3'b1??:
        _588_ = b[11:8];
      default:
        _588_ = a;
    endcase
  endfunction
  assign _012_ = _588_(4'hx, { _273_, _271_, _270_ }, { _172_, _169_, _174_ });
  assign _271_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 4'h0 : 4'hx;
  assign _272_ = m_axi_request_rw ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:466.12-466.28|config_ctrl.v:466.7-478.10" *) m_axi_wstrb : 4'hx;
  assign _273_ = _138_ ? (* src = "config_ctrl.v:465.11-465.47|config_ctrl.v:465.6-479.9" *) _272_ : 4'hx;
  assign _274_ = m_axi_wready ? (* src = "config_ctrl.v:540.11-540.23|config_ctrl.v:540.6-549.9" *) 32'd0 : 32'hxxxxxxxx;
  function [31:0] _593_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* src = "config_ctrl.v:0.0-0.0|config_ctrl.v:460.4-551.11" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _593_ = b[31:0];
      3'b?1?:
        _593_ = b[63:32];
      3'b1??:
        _593_ = b[95:64];
      default:
        _593_ = a;
    endcase
  endfunction
  assign _011_ = _593_(32'hxxxxxxxx, { _171_, _275_, _274_ }, { _172_, _169_, _174_ });
  assign _275_ = _140_ ? (* full_case = 32'd1 *) (* src = "config_ctrl.v:519.11-519.40|config_ctrl.v:519.6-536.9" *) 32'd0 : 32'hxxxxxxxx;
  assign m_axi_request = axi_grant_o_reg ? (* src = "config_ctrl.v:179.25-179.73" *) f_axi_request : wb_axi_request;
  assign m_axi_request_rw = axi_grant_o_reg ? (* src = "config_ctrl.v:180.28-180.82" *) f_axi_request_rw : wb_axi_request_rw;
  assign m_axi_wstrb = axi_grant_o_reg ? (* src = "config_ctrl.v:181.23-181.67" *) f_axi_wstrb : wb_axi_wstrb;
  assign m_axi_request_done = axi_grant_o_reg ? (* src = "config_ctrl.v:182.30-182.88" *) f_axi_request_done : wb_axi_request_done;
  assign m_axi_request_add = axi_grant_o_reg ? (* src = "config_ctrl.v:183.29-183.85" *) f_axi_request_add : wb_axi_request_add;
  assign m_axi_wdata = axi_grant_o_reg ? (* src = "config_ctrl.v:184.23-184.67" *) f_axi_wdata : wb_axi_wdata;
  assign { _276_[31:1], axi_awready5 } = cc_axi_awvalid ? (* src = "config_ctrl.v:233.24-233.46" *) 32'd1 : 32'd0;
  assign { _277_[31:1], axi_wready5 } = cc_axi_wvalid ? (* src = "config_ctrl.v:234.23-234.44" *) 32'd1 : 32'd0;
  assign _014_ = _126_ ? (* src = "config_ctrl.v:267.22-267.76" *) 1'h1 : 1'h0;
  assign _015_ = _127_ ? (* src = "config_ctrl.v:268.22-268.76" *) 1'h1 : 1'h0;
  assign _017_ = _128_ ? (* src = "config_ctrl.v:269.22-269.76" *) 1'h1 : 1'h0;
  assign _018_ = _129_ ? (* src = "config_ctrl.v:270.22-270.76" *) 1'h1 : 1'h0;
  assign _020_ = _130_ ? (* src = "config_ctrl.v:271.22-271.76" *) 1'h1 : 1'h0;
  assign _016_ = _131_ ? (* src = "config_ctrl.v:272.17-272.71" *) 1'h1 : 1'h0;
  assign _019_ = _135_ ? (* src = "config_ctrl.v:273.21-273.121" *) 1'h1 : 1'h0;
  assign _276_[0] = axi_awready5;
  assign _277_[0] = axi_wready5;
  assign aa_cfg_arready = aa_cfg_arready_o;
  assign aa_cfg_awready = aa_cfg_awready_o;
  assign aa_cfg_rdata = aa_cfg_rdata_o;
  assign aa_cfg_rvalid = aa_cfg_rvalid_o;
  assign aa_cfg_wready = aa_cfg_wready_o;
  assign axi_araddr = axi_araddr_o;
  assign axi_arready5 = 1'h1;
  assign axi_arvalid = axi_arvalid_o;
  assign axi_awaddr = axi_awaddr_o;
  assign axi_awvalid = axi_awvalid_o;
  assign axi_rdata5 = { 27'h0000000, user_prj_sel_o };
  assign axi_rready = axi_rready_o;
  assign axi_rvalid5 = 1'h1;
  assign axi_wdata = axi_wdata_o;
  assign axi_wstrb = axi_wstrb_o;
  assign axi_wvalid = axi_wvalid_o;
  assign cc_aa_enable = cc_aa_enable_o;
  assign cc_as_enable = cc_as_enable_o;
  assign cc_is_enable = cc_is_enable_o;
  assign cc_la_enable = cc_la_enable_o;
  assign cc_up_enable = cc_up_enable_o;
  assign user_prj_sel = user_prj_sel_o;
  assign wbs_ack = wbs_ack_o;
  assign wbs_rdata = wbs_rdata_o;
endmodule

(* dynports =  1  *)
(* hdlname = "\\USER_SUBSYS" *)
(* src = "user_subsys.all.v:343.1-873.10" *)
module \$paramod$3faf3427151f109282c99465db437054f2e3eec4\USER_SUBSYS (axi_awvalid, axi_awaddr, axi_arvalid, axi_araddr, axi_wvalid, axi_wstrb, axi_wdata, axi_rready, cc_up_enable, s_tvalid, s_tdata, s_tuser, s_tstrb, s_tkeep, s_tlast, m_tready, la_up_data, axi_awready, axi_arready, axi_wready, axi_rvalid
, axi_rdata, s_tready, m_tvalid, m_tdata, m_tuser, m_tstrb, m_tkeep, m_tlast, low__pri_irq, high_pri_irq, up_la_data, axi_clk, axis_clk, axi_reset_n, axis_rst_n, user_clock2, uck2_rst_n, user_prj_sel);
  (* src = "user_subsys.all.v:469.30-469.44" *)
  wire High_pri_req_0;
  (* src = "user_subsys.all.v:471.30-471.44" *)
  wire High_pri_req_1;
  (* src = "user_subsys.all.v:473.30-473.44" *)
  wire High_pri_req_2;
  (* src = "user_subsys.all.v:475.30-475.44" *)
  wire High_pri_req_3;
  (* src = "user_subsys.all.v:412.30-412.36" *)
  wire [11:0] araddr;
  (* src = "user_subsys.all.v:390.30-390.39" *)
  wire arready_0;
  (* src = "user_subsys.all.v:395.30-395.39" *)
  wire arready_1;
  (* src = "user_subsys.all.v:400.30-400.39" *)
  wire arready_2;
  (* src = "user_subsys.all.v:405.30-405.39" *)
  wire arready_3;
  (* src = "user_subsys.all.v:411.30-411.47" *)
  wire arvalid_0_arvalid;
  (* src = "user_subsys.all.v:426.30-426.47" *)
  wire arvalid_1_arvalid;
  (* src = "user_subsys.all.v:431.30-431.47" *)
  wire arvalid_2_arvalid;
  (* src = "user_subsys.all.v:436.30-436.47" *)
  wire arvalid_3_arvalid;
  (* src = "user_subsys.all.v:410.30-410.36" *)
  wire [11:0] awaddr;
  (* src = "user_subsys.all.v:389.30-389.39" *)
  wire awready_0;
  (* src = "user_subsys.all.v:394.30-394.39" *)
  wire awready_1;
  (* src = "user_subsys.all.v:399.30-399.39" *)
  wire awready_2;
  (* src = "user_subsys.all.v:404.30-404.39" *)
  wire awready_3;
  (* src = "user_subsys.all.v:409.30-409.47" *)
  wire awvalid_0_awvalid;
  (* src = "user_subsys.all.v:425.30-425.47" *)
  wire awvalid_1_awvalid;
  (* src = "user_subsys.all.v:430.30-430.47" *)
  wire awvalid_2_awvalid;
  (* src = "user_subsys.all.v:435.30-435.47" *)
  wire awvalid_3_awvalid;
  (* src = "user_subsys.all.v:350.38-350.48" *)
  input [14:0] axi_araddr;
  wire [14:0] axi_araddr;
  (* src = "user_subsys.all.v:365.38-365.49" *)
  output axi_arready;
  wire axi_arready;
  (* src = "user_subsys.all.v:349.38-349.49" *)
  input axi_arvalid;
  wire axi_arvalid;
  (* src = "user_subsys.all.v:348.38-348.48" *)
  input [14:0] axi_awaddr;
  wire [14:0] axi_awaddr;
  (* src = "user_subsys.all.v:364.38-364.49" *)
  output axi_awready;
  wire axi_awready;
  (* src = "user_subsys.all.v:347.38-347.49" *)
  input axi_awvalid;
  wire axi_awvalid;
  (* src = "user_subsys.all.v:379.38-379.45" *)
  input axi_clk;
  wire axi_clk;
  (* src = "user_subsys.all.v:368.38-368.47" *)
  output [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "user_subsys.all.v:381.38-381.49" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:354.38-354.48" *)
  input axi_rready;
  wire axi_rready;
  (* src = "user_subsys.all.v:367.38-367.48" *)
  output axi_rvalid;
  wire axi_rvalid;
  (* src = "user_subsys.all.v:353.38-353.47" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "user_subsys.all.v:366.38-366.48" *)
  output axi_wready;
  wire axi_wready;
  (* src = "user_subsys.all.v:352.38-352.47" *)
  input [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "user_subsys.all.v:351.38-351.48" *)
  input axi_wvalid;
  wire axi_wvalid;
  (* src = "user_subsys.all.v:380.38-380.46" *)
  input axis_clk;
  wire axis_clk;
  (* src = "user_subsys.all.v:382.38-382.48" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:355.38-355.50" *)
  input cc_up_enable;
  wire cc_up_enable;
  (* src = "user_subsys.all.v:377.38-377.50" *)
  output high_pri_irq;
  wire high_pri_irq;
  (* src = "user_subsys.all.v:424.30-424.39" *)
  wire [63:0] la_data_i;
  (* src = "user_subsys.all.v:476.30-476.51" *)
  wire [63:0] la_data_o_la_data_0_0;
  (* src = "user_subsys.all.v:477.30-477.51" *)
  wire [63:0] la_data_o_la_data_1_1;
  (* src = "user_subsys.all.v:478.30-478.51" *)
  wire [63:0] la_data_o_la_data_2_2;
  (* src = "user_subsys.all.v:479.30-479.51" *)
  wire [63:0] la_data_o_la_data_3_3;
  (* src = "user_subsys.all.v:363.38-363.48" *)
  input [63:0] la_up_data;
  wire [63:0] la_up_data;
  (* src = "user_subsys.all.v:376.38-376.50" *)
  output low__pri_irq;
  wire low__pri_irq;
  (* src = "user_subsys.all.v:468.30-468.44" *)
  wire low__pri_irq_0;
  (* src = "user_subsys.all.v:470.30-470.44" *)
  wire low__pri_irq_1;
  (* src = "user_subsys.all.v:472.30-472.44" *)
  wire low__pri_irq_2;
  (* src = "user_subsys.all.v:474.30-474.44" *)
  wire low__pri_irq_3;
  (* src = "user_subsys.all.v:371.38-371.45" *)
  output [31:0] m_tdata;
  wire [31:0] m_tdata;
  (* src = "user_subsys.all.v:374.38-374.45" *)
  output [3:0] m_tkeep;
  wire [3:0] m_tkeep;
  (* src = "user_subsys.all.v:375.38-375.45" *)
  output m_tlast;
  wire m_tlast;
  (* src = "user_subsys.all.v:362.38-362.46" *)
  input m_tready;
  wire m_tready;
  (* src = "user_subsys.all.v:373.38-373.45" *)
  output [3:0] m_tstrb;
  wire [3:0] m_tstrb;
  (* src = "user_subsys.all.v:372.38-372.45" *)
  output [1:0] m_tuser;
  wire [1:0] m_tuser;
  (* src = "user_subsys.all.v:370.38-370.46" *)
  output m_tvalid;
  wire m_tvalid;
  (* src = "user_subsys.all.v:393.30-393.37" *)
  wire [31:0] rdata_0;
  (* src = "user_subsys.all.v:398.30-398.37" *)
  wire [31:0] rdata_1;
  (* src = "user_subsys.all.v:403.30-403.37" *)
  wire [31:0] rdata_2;
  (* src = "user_subsys.all.v:408.30-408.37" *)
  wire [31:0] rdata_3;
  (* src = "user_subsys.all.v:416.30-416.36" *)
  wire rready;
  (* src = "user_subsys.all.v:392.30-392.38" *)
  wire rvalid_0;
  (* src = "user_subsys.all.v:397.30-397.38" *)
  wire rvalid_1;
  (* src = "user_subsys.all.v:402.30-402.38" *)
  wire rvalid_2;
  (* src = "user_subsys.all.v:407.30-407.38" *)
  wire rvalid_3;
  (* src = "user_subsys.all.v:357.38-357.45" *)
  input [31:0] s_tdata;
  wire [31:0] s_tdata;
  (* src = "user_subsys.all.v:360.38-360.45" *)
  input [3:0] s_tkeep;
  wire [3:0] s_tkeep;
  (* src = "user_subsys.all.v:361.38-361.45" *)
  input s_tlast;
  wire s_tlast;
  (* src = "user_subsys.all.v:369.38-369.46" *)
  output s_tready;
  wire s_tready;
  (* src = "user_subsys.all.v:359.38-359.45" *)
  input [3:0] s_tstrb;
  wire [3:0] s_tstrb;
  (* src = "user_subsys.all.v:358.38-358.45" *)
  input [1:0] s_tuser;
  wire [1:0] s_tuser;
  (* src = "user_subsys.all.v:356.38-356.46" *)
  input s_tvalid;
  wire s_tvalid;
  (* src = "user_subsys.all.v:445.30-445.40" *)
  wire [31:0] sm_tdata_0;
  (* src = "user_subsys.all.v:451.30-451.40" *)
  wire [31:0] sm_tdata_1;
  (* src = "user_subsys.all.v:457.30-457.40" *)
  wire [31:0] sm_tdata_2;
  (* src = "user_subsys.all.v:463.30-463.40" *)
  wire [31:0] sm_tdata_3;
  (* src = "user_subsys.all.v:446.30-446.38" *)
  wire [2:0] sm_tid_0;
  (* src = "user_subsys.all.v:452.30-452.38" *)
  wire [2:0] sm_tid_1;
  (* src = "user_subsys.all.v:458.30-458.38" *)
  wire [2:0] sm_tid_2;
  (* src = "user_subsys.all.v:464.30-464.38" *)
  wire [2:0] sm_tid_3;
  (* src = "user_subsys.all.v:448.30-448.40" *)
  wire sm_tkeep_0;
  (* src = "user_subsys.all.v:454.30-454.40" *)
  wire sm_tkeep_1;
  (* src = "user_subsys.all.v:460.30-460.40" *)
  wire sm_tkeep_2;
  (* src = "user_subsys.all.v:466.30-466.40" *)
  wire sm_tkeep_3;
  (* src = "user_subsys.all.v:449.30-449.40" *)
  wire sm_tlast_0;
  (* src = "user_subsys.all.v:455.30-455.40" *)
  wire sm_tlast_1;
  (* src = "user_subsys.all.v:461.30-461.40" *)
  wire sm_tlast_2;
  (* src = "user_subsys.all.v:467.30-467.40" *)
  wire sm_tlast_3;
  (* src = "user_subsys.all.v:423.30-423.39" *)
  wire sm_tready;
  (* src = "user_subsys.all.v:447.30-447.40" *)
  wire [3:0] sm_tstrb_0;
  (* src = "user_subsys.all.v:453.30-453.40" *)
  wire [3:0] sm_tstrb_1;
  (* src = "user_subsys.all.v:459.30-459.40" *)
  wire [3:0] sm_tstrb_2;
  (* src = "user_subsys.all.v:465.30-465.40" *)
  wire [3:0] sm_tstrb_3;
  (* src = "user_subsys.all.v:444.30-444.41" *)
  wire sm_tvalid_0;
  (* src = "user_subsys.all.v:450.30-450.41" *)
  wire sm_tvalid_1;
  (* src = "user_subsys.all.v:456.30-456.41" *)
  wire sm_tvalid_2;
  (* src = "user_subsys.all.v:462.30-462.41" *)
  wire sm_tvalid_3;
  (* src = "user_subsys.all.v:418.30-418.38" *)
  wire [31:0] ss_tdata;
  (* src = "user_subsys.all.v:421.30-421.38" *)
  wire [3:0] ss_tkeep;
  (* src = "user_subsys.all.v:422.30-422.38" *)
  wire ss_tlast;
  (* src = "user_subsys.all.v:440.30-440.41" *)
  wire ss_tready_0;
  (* src = "user_subsys.all.v:441.30-441.41" *)
  wire ss_tready_1;
  (* src = "user_subsys.all.v:442.30-442.41" *)
  wire ss_tready_2;
  (* src = "user_subsys.all.v:443.30-443.41" *)
  wire ss_tready_3;
  (* src = "user_subsys.all.v:420.30-420.38" *)
  wire [3:0] ss_tstrb;
  (* src = "user_subsys.all.v:419.30-419.38" *)
  wire [1:0] ss_tuser;
  (* src = "user_subsys.all.v:417.30-417.51" *)
  wire ss_tvalid_0_ss_tvalid;
  (* src = "user_subsys.all.v:429.30-429.51" *)
  wire ss_tvalid_1_ss_tvalid;
  (* src = "user_subsys.all.v:434.30-434.51" *)
  wire ss_tvalid_2_ss_tvalid;
  (* src = "user_subsys.all.v:439.30-439.51" *)
  wire ss_tvalid_3_ss_tvalid;
  (* src = "user_subsys.all.v:384.38-384.48" *)
  input uck2_rst_n;
  wire uck2_rst_n;
  (* src = "user_subsys.all.v:378.38-378.48" *)
  output [63:0] up_la_data;
  wire [63:0] up_la_data;
  (* src = "user_subsys.all.v:383.38-383.49" *)
  input user_clock2;
  wire user_clock2;
  (* src = "user_subsys.all.v:385.38-385.50" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  (* src = "user_subsys.all.v:415.30-415.35" *)
  wire [31:0] wdata;
  (* src = "user_subsys.all.v:391.30-391.38" *)
  wire wready_0;
  (* src = "user_subsys.all.v:396.30-396.38" *)
  wire wready_1;
  (* src = "user_subsys.all.v:401.30-401.38" *)
  wire wready_2;
  (* src = "user_subsys.all.v:406.30-406.38" *)
  wire wready_3;
  (* src = "user_subsys.all.v:414.30-414.43" *)
  wire [3:0] wstrb_0_wstrb;
  (* src = "user_subsys.all.v:428.30-428.43" *)
  wire [3:0] wstrb_1_wstrb;
  (* src = "user_subsys.all.v:433.30-433.43" *)
  wire [3:0] wstrb_2_wstrb;
  (* src = "user_subsys.all.v:438.30-438.43" *)
  wire [3:0] wstrb_3_wstrb;
  (* src = "user_subsys.all.v:413.30-413.45" *)
  wire wvalid_0_wvalid;
  (* src = "user_subsys.all.v:427.30-427.45" *)
  wire wvalid_1_wvalid;
  (* src = "user_subsys.all.v:432.30-432.45" *)
  wire wvalid_2_wvalid;
  (* src = "user_subsys.all.v:437.30-437.45" *)
  wire wvalid_3_wvalid;
  (* src = "user_subsys.all.v:489.33-547.47" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIL_SLAV  U_AXIL_SLAV0 (
    .araddr(araddr),
    .arready_0(arready_0),
    .arready_1(arready_1),
    .arready_2(arready_2),
    .arready_3(arready_3),
    .arvalid_0(arvalid_0_arvalid),
    .arvalid_1(arvalid_1_arvalid),
    .arvalid_2(arvalid_2_arvalid),
    .arvalid_3(arvalid_3_arvalid),
    .awaddr(awaddr),
    .awready_0(awready_0),
    .awready_1(awready_1),
    .awready_2(awready_2),
    .awready_3(awready_3),
    .awvalid_0(awvalid_0_awvalid),
    .awvalid_1(awvalid_1_awvalid),
    .awvalid_2(awvalid_2_awvalid),
    .awvalid_3(awvalid_3_awvalid),
    .axi_araddr(axi_araddr),
    .axi_arready(axi_arready),
    .axi_arvalid(axi_arvalid),
    .axi_awaddr(axi_awaddr),
    .axi_awready(axi_awready),
    .axi_awvalid(axi_awvalid),
    .axi_clk(axi_clk),
    .axi_rdata(axi_rdata),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready),
    .axi_rvalid(axi_rvalid),
    .axi_wdata(axi_wdata),
    .axi_wready(axi_wready),
    .axi_wstrb(axi_wstrb),
    .axi_wvalid(axi_wvalid),
    .cc_up_enable(cc_up_enable),
    .rdata_0(rdata_0),
    .rdata_1(rdata_1),
    .rdata_2(rdata_2),
    .rdata_3(rdata_3),
    .rready(rready),
    .rvalid_0(rvalid_0),
    .rvalid_1(rvalid_1),
    .rvalid_2(rvalid_2),
    .rvalid_3(rvalid_3),
    .user_prj_sel(user_prj_sel),
    .wdata(wdata),
    .wready_0(wready_0),
    .wready_1(wready_1),
    .wready_2(wready_2),
    .wready_3(wready_3),
    .wstrb_0(wstrb_0_wstrb),
    .wstrb_1(wstrb_1_wstrb),
    .wstrb_2(wstrb_2_wstrb),
    .wstrb_3(wstrb_3_wstrb),
    .wvalid_0(wvalid_0_wvalid),
    .wvalid_1(wvalid_1_wvalid),
    .wvalid_2(wvalid_2_wvalid),
    .wvalid_3(wvalid_3_wvalid)
  );
  (* src = "user_subsys.all.v:784.33-821.47" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_MSTR  U_AXIS_MSTR0 (
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .m_tdata(m_tdata),
    .m_tkeep(m_tkeep),
    .m_tlast(m_tlast),
    .m_tready(m_tready),
    .m_tstrb(m_tstrb),
    .m_tuser(m_tuser),
    .m_tvalid(m_tvalid),
    .sm_tdata_0(sm_tdata_0),
    .sm_tdata_1(sm_tdata_1),
    .sm_tdata_2(sm_tdata_2),
    .sm_tdata_3(sm_tdata_3),
    .sm_tid_0(sm_tid_0),
    .sm_tid_1(sm_tid_1),
    .sm_tid_2(sm_tid_2),
    .sm_tid_3(sm_tid_3),
    .sm_tkeep_0(sm_tkeep_0),
    .sm_tkeep_1(sm_tkeep_1),
    .sm_tkeep_2(sm_tkeep_2),
    .sm_tkeep_3(sm_tkeep_3),
    .sm_tlast_0(sm_tlast_0),
    .sm_tlast_1(sm_tlast_1),
    .sm_tlast_2(sm_tlast_2),
    .sm_tlast_3(sm_tlast_3),
    .sm_tready(sm_tready),
    .sm_tstrb_0(sm_tstrb_0),
    .sm_tstrb_1(sm_tstrb_1),
    .sm_tstrb_2(sm_tstrb_2),
    .sm_tstrb_3(sm_tstrb_3),
    .sm_tvalid_0(sm_tvalid_0),
    .sm_tvalid_1(sm_tvalid_1),
    .sm_tvalid_2(sm_tvalid_2),
    .sm_tvalid_3(sm_tvalid_3),
    .user_prj_sel(user_prj_sel)
  );
  (* src = "user_subsys.all.v:749.33-774.47" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_SLAV  U_AXIS_SLAV0 (
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .s_tdata(s_tdata),
    .s_tkeep(s_tkeep),
    .s_tlast(s_tlast),
    .s_tready(s_tready),
    .s_tstrb(s_tstrb),
    .s_tuser(s_tuser),
    .s_tvalid(s_tvalid),
    .ss_tdata(ss_tdata),
    .ss_tkeep(ss_tkeep),
    .ss_tlast(ss_tlast),
    .ss_tready_0(ss_tready_0),
    .ss_tready_1(ss_tready_1),
    .ss_tready_2(ss_tready_2),
    .ss_tready_3(ss_tready_3),
    .ss_tstrb(ss_tstrb),
    .ss_tuser(ss_tuser),
    .ss_tvalid_0(ss_tvalid_0_ss_tvalid),
    .ss_tvalid_1(ss_tvalid_1_ss_tvalid),
    .ss_tvalid_2(ss_tvalid_2_ss_tvalid),
    .ss_tvalid_3(ss_tvalid_3_ss_tvalid),
    .user_prj_sel(user_prj_sel)
  );
  (* src = "user_subsys.all.v:830.31-845.43" *)
  \$paramod\IRQ_MUX\pADDR_WIDTH=s32'00000000000000000000000000001010  U_IRQ_MUX0 (
    .High_pri_req_0(High_pri_req_0),
    .High_pri_req_1(High_pri_req_1),
    .High_pri_req_2(High_pri_req_2),
    .High_pri_req_3(High_pri_req_3),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_rst_n(axis_rst_n),
    .high_pri_irq(high_pri_irq),
    .low__pri_irq(low__pri_irq),
    .low__pri_irq_0(low__pri_irq_0),
    .low__pri_irq_1(low__pri_irq_1),
    .low__pri_irq_2(low__pri_irq_2),
    .low__pri_irq_3(low__pri_irq_3),
    .user_prj_sel(user_prj_sel)
  );
  (* src = "user_subsys.all.v:855.30-868.41" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\LA_MUX  U_LA_MUX0 (
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .la_data_0(la_data_o_la_data_0_0),
    .la_data_1(la_data_o_la_data_1_1),
    .la_data_2(la_data_o_la_data_2_2),
    .la_data_3(la_data_o_la_data_3_3),
    .la_data_i(la_data_i),
    .la_up_data(la_up_data),
    .up_la_data(up_la_data),
    .user_prj_sel(user_prj_sel)
  );
  (* src = "user_subsys.all.v:557.32-595.43" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\USER_PRJ  U_USRPRJ0 (
    .High_pri_req(High_pri_req_0),
    .araddr(araddr),
    .arready(arready_0),
    .arvalid(arvalid_0_arvalid),
    .awaddr(awaddr),
    .awready(awready_0),
    .awvalid(awvalid_0_awvalid),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .la_data_i(la_data_i),
    .la_data_o(la_data_o_la_data_0_0),
    .low__pri_irq(low__pri_irq_0),
    .rdata(rdata_0),
    .rready(rready),
    .rvalid(rvalid_0),
    .sm_tdata(sm_tdata_0),
    .sm_tid(sm_tid_0),
    .sm_tkeep(sm_tkeep_0),
    .sm_tlast(sm_tlast_0),
    .sm_tready(sm_tready),
    .sm_tstrb(sm_tstrb_0),
    .sm_tvalid(sm_tvalid_0),
    .ss_tdata(ss_tdata),
    .ss_tkeep(ss_tkeep),
    .ss_tlast(ss_tlast),
    .ss_tready(ss_tready_0),
    .ss_tstrb(ss_tstrb),
    .ss_tuser(ss_tuser),
    .ss_tvalid(ss_tvalid_0_ss_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .wdata(wdata),
    .wready(wready_0),
    .wstrb(wstrb_0_wstrb),
    .wvalid(wvalid_0_wvalid)
  );
  (* src = "user_subsys.all.v:605.32-643.43" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\USER_PRJ  U_USRPRJ1 (
    .High_pri_req(High_pri_req_1),
    .araddr(araddr),
    .arready(arready_1),
    .arvalid(arvalid_1_arvalid),
    .awaddr(awaddr),
    .awready(awready_1),
    .awvalid(awvalid_1_awvalid),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .la_data_i(la_data_i),
    .la_data_o(la_data_o_la_data_1_1),
    .low__pri_irq(low__pri_irq_1),
    .rdata(rdata_1),
    .rready(rready),
    .rvalid(rvalid_1),
    .sm_tdata(sm_tdata_1),
    .sm_tid(sm_tid_1),
    .sm_tkeep(sm_tkeep_1),
    .sm_tlast(sm_tlast_1),
    .sm_tready(sm_tready),
    .sm_tstrb(sm_tstrb_1),
    .sm_tvalid(sm_tvalid_1),
    .ss_tdata(ss_tdata),
    .ss_tkeep(ss_tkeep),
    .ss_tlast(ss_tlast),
    .ss_tready(ss_tready_1),
    .ss_tstrb(ss_tstrb),
    .ss_tuser(ss_tuser),
    .ss_tvalid(ss_tvalid_1_ss_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .wdata(wdata),
    .wready(wready_1),
    .wstrb(wstrb_1_wstrb),
    .wvalid(wvalid_1_wvalid)
  );
  (* src = "user_subsys.all.v:653.32-691.43" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\USER_PRJ  U_USRPRJ2 (
    .High_pri_req(High_pri_req_2),
    .araddr(araddr),
    .arready(arready_2),
    .arvalid(arvalid_2_arvalid),
    .awaddr(awaddr),
    .awready(awready_2),
    .awvalid(awvalid_2_awvalid),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .la_data_i(la_data_i),
    .la_data_o(la_data_o_la_data_2_2),
    .low__pri_irq(low__pri_irq_2),
    .rdata(rdata_2),
    .rready(rready),
    .rvalid(rvalid_2),
    .sm_tdata(sm_tdata_2),
    .sm_tid(sm_tid_2),
    .sm_tkeep(sm_tkeep_2),
    .sm_tlast(sm_tlast_2),
    .sm_tready(sm_tready),
    .sm_tstrb(sm_tstrb_2),
    .sm_tvalid(sm_tvalid_2),
    .ss_tdata(ss_tdata),
    .ss_tkeep(ss_tkeep),
    .ss_tlast(ss_tlast),
    .ss_tready(ss_tready_2),
    .ss_tstrb(ss_tstrb),
    .ss_tuser(ss_tuser),
    .ss_tvalid(ss_tvalid_2_ss_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .wdata(wdata),
    .wready(wready_2),
    .wstrb(wstrb_2_wstrb),
    .wvalid(wvalid_2_wvalid)
  );
  (* src = "user_subsys.all.v:701.32-739.43" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\USER_PRJ  U_USRPRJ3 (
    .High_pri_req(High_pri_req_3),
    .araddr(araddr),
    .arready(arready_3),
    .arvalid(arvalid_3_arvalid),
    .awaddr(awaddr),
    .awready(awready_3),
    .awvalid(awvalid_3_awvalid),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .la_data_i(la_data_i),
    .la_data_o(la_data_o_la_data_3_3),
    .low__pri_irq(low__pri_irq_3),
    .rdata(rdata_3),
    .rready(rready),
    .rvalid(rvalid_3),
    .sm_tdata(sm_tdata_3),
    .sm_tid(sm_tid_3),
    .sm_tkeep(sm_tkeep_3),
    .sm_tlast(sm_tlast_3),
    .sm_tready(sm_tready),
    .sm_tstrb(sm_tstrb_3),
    .sm_tvalid(sm_tvalid_3),
    .ss_tdata(ss_tdata),
    .ss_tkeep(ss_tkeep),
    .ss_tlast(ss_tlast),
    .ss_tready(ss_tready_3),
    .ss_tstrb(ss_tstrb),
    .ss_tuser(ss_tuser),
    .ss_tvalid(ss_tvalid_3_ss_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .wdata(wdata),
    .wready(wready_3),
    .wstrb(wstrb_3_wstrb),
    .wvalid(wvalid_3_wvalid)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\fsic_io_serdes_rx" *)
(* src = "fsic_io_serdes_rx.v:24.1-213.10" *)
module \$paramod$52780d1f35a7342343249aaad3393e391f82e1d4\fsic_io_serdes_rx (axis_rst_n, rxclk, rxen, ioclk, coreclk, Serial_Data_in, rxdata_out, rxdata_out_valid);
  (* src = "fsic_io_serdes_rx.v:67.2-77.5" *)
  wire [4:0] _00_;
  (* src = "fsic_io_serdes_rx.v:48.2-61.5" *)
  wire [2:0] _01_;
  (* src = "fsic_io_serdes_rx.v:117.15-117.24" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _02_;
  (* src = "fsic_io_serdes_rx.v:146.27-146.47" *)
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  (* src = "fsic_io_serdes_rx.v:59.14-59.21" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _04_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [4:0] _05_;
  (* src = "fsic_io_serdes_rx.v:114.10-114.20" *)
  wire _06_;
  (* src = "fsic_io_serdes_rx.v:164.31-164.65" *)
  wire _07_;
  (* src = "fsic_io_serdes_rx.v:56.8-56.18" *)
  wire _08_;
  (* src = "fsic_io_serdes_rx.v:179.8-179.38" *)
  wire _09_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [31:0] _10_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [4:0] _11_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [4:0] _12_;
  wire [2:0] _13_;
  wire [2:0] _14_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [4:0] _15_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire [4:0] _16_;
  (* src = "fsic_io_serdes_rx.v:0.0-0.0" *)
  wire _17_;
  (* src = "fsic_io_serdes_rx.v:64.26-64.32" *)
  reg [4:0] RxFifo;
  (* src = "fsic_io_serdes_rx.v:33.15-33.29" *)
  input Serial_Data_in;
  wire Serial_Data_in;
  (* src = "fsic_io_serdes_rx.v:28.15-28.25" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "fsic_io_serdes_rx.v:32.15-32.22" *)
  input coreclk;
  wire coreclk;
  (* src = "fsic_io_serdes_rx.v:31.15-31.20" *)
  input ioclk;
  wire ioclk;
  (* src = "fsic_io_serdes_rx.v:106.34-106.39" *)
  reg [2:0] r_ptr;
  (* src = "fsic_io_serdes_rx.v:138.31-138.49" *)
  reg [1:0] rx_shift_phase_cnt;
  (* src = "fsic_io_serdes_rx.v:124.23-124.35" *)
  reg [3:0] rx_shift_reg;
  (* src = "fsic_io_serdes_rx.v:42.7-42.25" *)
  wire rx_shift_reg_valid;
  (* src = "fsic_io_serdes_rx.v:92.6-92.14" *)
  reg rx_start;
  (* src = "fsic_io_serdes_rx.v:152.12-152.26" *)
  reg [2:0] rx_start_delay;
  (* src = "fsic_io_serdes_rx.v:168.23-168.35" *)
  reg [3:0] rx_sync_fifo;
  (* src = "fsic_io_serdes_rx.v:169.6-169.24" *)
  reg rx_sync_fifo_valid;
  (* src = "fsic_io_serdes_rx.v:29.15-29.20" *)
  input rxclk;
  wire rxclk;
  (* src = "fsic_io_serdes_rx.v:34.33-34.43" *)
  output [3:0] rxdata_out;
  wire [3:0] rxdata_out;
  (* src = "fsic_io_serdes_rx.v:35.16-35.32" *)
  output rxdata_out_valid;
  wire rxdata_out_valid;
  (* src = "fsic_io_serdes_rx.v:30.16-30.20" *)
  input rxen;
  wire rxen;
  (* src = "fsic_io_serdes_rx.v:39.34-39.39" *)
  reg [2:0] w_ptr;
  (* src = "fsic_io_serdes_rx.v:44.7-44.26" *)
  wire w_ptr_graycode_bit0;
  (* src = "fsic_io_serdes_rx.v:40.6-40.15" *)
  reg w_ptr_pre;
  (* src = "fsic_io_serdes_rx.v:41.6-41.16" *)
  reg w_ptr_sync;
  assign _02_ = r_ptr + (* src = "fsic_io_serdes_rx.v:117.15-117.24" *) 32'd1;
  assign _03_ = rx_shift_phase_cnt + (* src = "fsic_io_serdes_rx.v:146.27-146.47" *) 32'd1;
  assign _04_ = w_ptr + (* src = "fsic_io_serdes_rx.v:59.14-59.21" *) 32'd1;
  assign _05_ = RxFifo & (* src = "fsic_io_serdes_rx.v:0.0-0.0" *) _11_;
  (* src = "fsic_io_serdes_rx.v:171.2-188.5" *)
  always @(negedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_sync_fifo_valid <= 1'h0;
    else if (_09_) rx_sync_fifo_valid <= 1'h1;
  (* src = "fsic_io_serdes_rx.v:140.2-150.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_shift_phase_cnt <= 2'h3;
    else if (rx_start) rx_shift_phase_cnt <= _03_[1:0];
  (* src = "fsic_io_serdes_rx.v:126.2-136.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_shift_reg[2:0] <= 3'h0;
    else if (rx_start) rx_shift_reg[2:0] <= rx_shift_reg[3:1];
  (* src = "fsic_io_serdes_rx.v:126.2-136.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_shift_reg[3] <= 1'h0;
    else if (rx_start) rx_shift_reg[3] <= _17_;
  (* src = "fsic_io_serdes_rx.v:171.2-188.5" *)
  always @(negedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_sync_fifo <= 4'h0;
    else if (_09_) rx_sync_fifo <= rx_shift_reg;
  (* src = "fsic_io_serdes_rx.v:108.2-122.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) r_ptr <= 3'h0;
    else if (rx_start) r_ptr <= _13_;
  (* src = "fsic_io_serdes_rx.v:93.2-103.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_start <= 1'h0;
    else if (w_ptr_sync) rx_start <= 1'h1;
  assign _06_ = r_ptr == (* src = "fsic_io_serdes_rx.v:114.10-114.20" *) 3'h4;
  assign _07_ = rx_shift_phase_cnt == (* src = "fsic_io_serdes_rx.v:164.31-164.65" *) 2'h3;
  assign _08_ = w_ptr == (* src = "fsic_io_serdes_rx.v:56.8-56.18" *) 3'h4;
  assign rx_shift_reg_valid = _07_ && (* src = "fsic_io_serdes_rx.v:164.30-164.87" *) rx_start_delay[2];
  assign _09_ = rx_start && (* src = "fsic_io_serdes_rx.v:179.8-179.38" *) rx_shift_reg_valid;
  assign _10_ = - (* src = "fsic_io_serdes_rx.v:0.0-0.0" *) $signed({ 29'h00000000, w_ptr });
  assign _11_ = ~ (* src = "fsic_io_serdes_rx.v:0.0-0.0" *) _15_;
  assign _12_ = _05_ | (* src = "fsic_io_serdes_rx.v:0.0-0.0" *) _16_;
  (* src = "fsic_io_serdes_rx.v:154.2-162.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) rx_start_delay <= 3'h0;
    else rx_start_delay <= { rx_start_delay[1:0], rx_start };
  (* src = "fsic_io_serdes_rx.v:81.2-90.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) w_ptr_pre <= 1'h0;
    else w_ptr_pre <= w_ptr_graycode_bit0;
  (* src = "fsic_io_serdes_rx.v:81.2-90.5" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) w_ptr_sync <= 1'h0;
    else w_ptr_sync <= w_ptr_pre;
  (* src = "fsic_io_serdes_rx.v:67.2-77.5" *)
  always @(negedge rxclk, negedge axis_rst_n)
    if (!axis_rst_n) RxFifo <= 5'h00;
    else RxFifo <= _00_;
  (* src = "fsic_io_serdes_rx.v:48.2-61.5" *)
  always @(negedge rxclk, negedge axis_rst_n)
    if (!axis_rst_n) w_ptr <= 3'h0;
    else w_ptr <= _01_;
  assign _13_ = _06_ ? (* full_case = 32'd1 *) (* src = "fsic_io_serdes_rx.v:114.10-114.20|fsic_io_serdes_rx.v:114.5-117.25" *) 3'h0 : _02_[2:0];
  assign _00_ = rxen ? (* full_case = 32'd1 *) (* src = "fsic_io_serdes_rx.v:71.13-71.18|fsic_io_serdes_rx.v:71.8-76.6" *) _12_ : 5'h00;
  assign _14_ = _08_ ? (* full_case = 32'd1 *) (* src = "fsic_io_serdes_rx.v:56.8-56.18|fsic_io_serdes_rx.v:56.4-59.22" *) 3'h0 : _04_[2:0];
  assign _01_ = rxen ? (* full_case = 32'd1 *) (* src = "fsic_io_serdes_rx.v:52.13-52.18|fsic_io_serdes_rx.v:52.8-60.6" *) _14_ : 3'h0;
  assign _15_ = $signed(_10_) < 0 ? 1'h1 << - _10_ : 1'h1 >> _10_;
  assign _16_ = $signed(_10_) < 0 ? Serial_Data_in << - _10_ : Serial_Data_in >> _10_;
  wire [4:0] _50_ = RxFifo;
  assign _17_ = _50_[r_ptr +: 1];
  assign w_ptr_graycode_bit0 = w_ptr[1] ^ (* src = "fsic_io_serdes_rx.v:46.31-46.51" *) w_ptr[0];
  assign rxdata_out = rx_sync_fifo;
  assign rxdata_out_valid = rx_sync_fifo_valid;
endmodule

(* hdlname = "\\AXIL_AXIS" *)
(* src = "axil_axis.sv:7.1-80.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIL_AXIS (m_awvalid, m_awaddr, m_wvalid, m_wdata, m_wstrb, m_arvalid, m_araddr, m_rready, s_rdata, s_rvalid, s_awready, s_wready, s_arready, s_awvalid, s_awaddr, s_wvalid, s_wdata, s_wstrb, s_arvalid, s_araddr, s_rready
, m_rdata, m_rvalid, m_awready, m_wready, m_arready, cc_aa_enable, as_aa_tdata, as_aa_tstrb, as_aa_tkeep, as_aa_tlast, as_aa_tvalid, as_aa_tuser, aa_as_tready, aa_as_tdata, aa_as_tstrb, aa_as_tkeep, aa_as_tlast, aa_as_tvalid, aa_as_tuser, as_aa_tready, mb_irq
, axi_clk, axi_reset_n, axis_clk, axis_rst_n);
  (* src = "axil_axis.sv:45.24-45.35" *)
  output [31:0] aa_as_tdata;
  wire [31:0] aa_as_tdata;
  (* src = "axil_axis.sv:47.24-47.35" *)
  output [3:0] aa_as_tkeep;
  wire [3:0] aa_as_tkeep;
  (* src = "axil_axis.sv:48.24-48.35" *)
  output aa_as_tlast;
  wire aa_as_tlast;
  (* src = "axil_axis.sv:44.24-44.36" *)
  output aa_as_tready;
  wire aa_as_tready;
  (* src = "axil_axis.sv:46.24-46.35" *)
  output [3:0] aa_as_tstrb;
  wire [3:0] aa_as_tstrb;
  (* src = "axil_axis.sv:50.24-50.35" *)
  output [1:0] aa_as_tuser;
  wire [1:0] aa_as_tuser;
  (* src = "axil_axis.sv:49.24-49.36" *)
  output aa_as_tvalid;
  wire aa_as_tvalid;
  (* src = "axil_axis.sv:38.24-38.35" *)
  input [31:0] as_aa_tdata;
  wire [31:0] as_aa_tdata;
  (* src = "axil_axis.sv:40.24-40.35" *)
  input [3:0] as_aa_tkeep;
  wire [3:0] as_aa_tkeep;
  (* src = "axil_axis.sv:41.24-41.35" *)
  input as_aa_tlast;
  wire as_aa_tlast;
  (* src = "axil_axis.sv:51.24-51.36" *)
  input as_aa_tready;
  wire as_aa_tready;
  (* src = "axil_axis.sv:39.24-39.35" *)
  input [3:0] as_aa_tstrb;
  wire [3:0] as_aa_tstrb;
  (* src = "axil_axis.sv:43.24-43.35" *)
  input [1:0] as_aa_tuser;
  wire [1:0] as_aa_tuser;
  (* src = "axil_axis.sv:42.24-42.36" *)
  input as_aa_tvalid;
  wire as_aa_tvalid;
  (* src = "axil_axis.sv:53.24-53.31" *)
  input axi_clk;
  wire axi_clk;
  (* src = "axil_axis.sv:54.24-54.35" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "axil_axis.sv:55.24-55.32" *)
  input axis_clk;
  wire axis_clk;
  (* src = "axil_axis.sv:56.24-56.34" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "axil_axis.sv:37.24-37.36" *)
  input cc_aa_enable;
  wire cc_aa_enable;
  (* src = "axil_axis.sv:17.24-17.32" *)
  output [31:0] m_araddr;
  wire [31:0] m_araddr;
  (* src = "axil_axis.sv:36.24-36.33" *)
  input m_arready;
  wire m_arready;
  (* src = "axil_axis.sv:16.24-16.33" *)
  output m_arvalid;
  wire m_arvalid;
  (* src = "axil_axis.sv:12.24-12.32" *)
  output [31:0] m_awaddr;
  wire [31:0] m_awaddr;
  (* src = "axil_axis.sv:34.24-34.33" *)
  input m_awready;
  wire m_awready;
  (* src = "axil_axis.sv:11.24-11.33" *)
  output m_awvalid;
  wire m_awvalid;
  (* src = "axil_axis.sv:32.24-32.31" *)
  input [31:0] m_rdata;
  wire [31:0] m_rdata;
  (* src = "axil_axis.sv:18.24-18.32" *)
  output m_rready;
  wire m_rready;
  (* src = "axil_axis.sv:33.24-33.32" *)
  input m_rvalid;
  wire m_rvalid;
  (* src = "axil_axis.sv:14.24-14.31" *)
  output [31:0] m_wdata;
  wire [31:0] m_wdata;
  (* src = "axil_axis.sv:35.24-35.32" *)
  input m_wready;
  wire m_wready;
  (* src = "axil_axis.sv:15.24-15.31" *)
  output [3:0] m_wstrb;
  wire [3:0] m_wstrb;
  (* src = "axil_axis.sv:13.24-13.32" *)
  output m_wvalid;
  wire m_wvalid;
  (* src = "axil_axis.sv:52.24-52.30" *)
  output mb_irq;
  wire mb_irq;
  (* src = "axil_axis.sv:30.24-30.32" *)
  input [14:0] s_araddr;
  wire [14:0] s_araddr;
  (* src = "axil_axis.sv:23.24-23.33" *)
  output s_arready;
  wire s_arready;
  (* src = "axil_axis.sv:29.24-29.33" *)
  input s_arvalid;
  wire s_arvalid;
  (* src = "axil_axis.sv:25.24-25.32" *)
  input [14:0] s_awaddr;
  wire [14:0] s_awaddr;
  (* src = "axil_axis.sv:21.24-21.33" *)
  output s_awready;
  wire s_awready;
  (* src = "axil_axis.sv:24.24-24.33" *)
  input s_awvalid;
  wire s_awvalid;
  (* src = "axil_axis.sv:19.24-19.31" *)
  output [31:0] s_rdata;
  wire [31:0] s_rdata;
  (* src = "axil_axis.sv:31.24-31.32" *)
  input s_rready;
  wire s_rready;
  (* src = "axil_axis.sv:20.24-20.32" *)
  output s_rvalid;
  wire s_rvalid;
  (* src = "axil_axis.sv:27.24-27.31" *)
  input [31:0] s_wdata;
  wire [31:0] s_wdata;
  (* src = "axil_axis.sv:22.24-22.32" *)
  output s_wready;
  wire s_wready;
  (* src = "axil_axis.sv:28.24-28.31" *)
  input [3:0] s_wstrb;
  wire [3:0] s_wstrb;
  (* src = "axil_axis.sv:26.24-26.32" *)
  input s_wvalid;
  wire s_wvalid;
  assign aa_as_tdata = 32'd0;
  assign aa_as_tkeep = 4'h0;
  assign aa_as_tlast = 1'h0;
  assign aa_as_tready = 1'h0;
  assign aa_as_tstrb = 4'h0;
  assign aa_as_tuser = 2'h0;
  assign aa_as_tvalid = 1'h0;
  assign m_araddr = 32'd0;
  assign m_arvalid = 1'h0;
  assign m_awaddr = 32'd0;
  assign m_awvalid = 1'h0;
  assign m_rready = 1'h0;
  assign m_wdata = 32'd0;
  assign m_wstrb = 4'h0;
  assign m_wvalid = 1'h0;
  assign mb_irq = 1'h0;
  assign s_arready = 1'h0;
  assign s_awready = 1'h0;
  assign s_rdata = 32'd0;
  assign s_rvalid = 1'h0;
  assign s_wready = 1'h0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\AXIL_SLAV" *)
(* src = "user_subsys.all.v:7.1-98.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIL_SLAV (awready_0, arready_0, wready_0, rvalid_0, rdata_0, awready_1, arready_1, wready_1, rvalid_1, rdata_1, awready_2, arready_2, wready_2, rvalid_2, rdata_2, awready_3, arready_3, wready_3, rvalid_3, rdata_3, awvalid_0
, awaddr, arvalid_0, araddr, wvalid_0, wstrb_0, wdata, rready, awvalid_1, arvalid_1, wvalid_1, wstrb_1, awvalid_2, arvalid_2, wvalid_2, wstrb_2, awvalid_3, arvalid_3, wvalid_3, wstrb_3, axi_awvalid, axi_awaddr
, axi_arvalid, axi_araddr, axi_wvalid, axi_wstrb, axi_wdata, axi_rready, cc_up_enable, axi_awready, axi_arready, axi_wready, axi_rvalid, axi_rdata, axi_clk, axi_reset_n, user_prj_sel);
  (* src = "user_subsys.all.v:34.38-34.44" *)
  output [11:0] araddr;
  wire [11:0] araddr;
  (* src = "user_subsys.all.v:12.38-12.47" *)
  input arready_0;
  wire arready_0;
  (* src = "user_subsys.all.v:17.38-17.47" *)
  input arready_1;
  wire arready_1;
  (* src = "user_subsys.all.v:22.38-22.47" *)
  input arready_2;
  wire arready_2;
  (* src = "user_subsys.all.v:27.38-27.47" *)
  input arready_3;
  wire arready_3;
  (* src = "user_subsys.all.v:33.38-33.47" *)
  output arvalid_0;
  wire arvalid_0;
  (* src = "user_subsys.all.v:40.38-40.47" *)
  output arvalid_1;
  wire arvalid_1;
  (* src = "user_subsys.all.v:44.38-44.47" *)
  output arvalid_2;
  wire arvalid_2;
  (* src = "user_subsys.all.v:48.38-48.47" *)
  output arvalid_3;
  wire arvalid_3;
  (* src = "user_subsys.all.v:32.38-32.44" *)
  output [11:0] awaddr;
  wire [11:0] awaddr;
  (* src = "user_subsys.all.v:11.38-11.47" *)
  input awready_0;
  wire awready_0;
  (* src = "user_subsys.all.v:16.38-16.47" *)
  input awready_1;
  wire awready_1;
  (* src = "user_subsys.all.v:21.38-21.47" *)
  input awready_2;
  wire awready_2;
  (* src = "user_subsys.all.v:26.38-26.47" *)
  input awready_3;
  wire awready_3;
  (* src = "user_subsys.all.v:31.38-31.47" *)
  output awvalid_0;
  wire awvalid_0;
  (* src = "user_subsys.all.v:39.38-39.47" *)
  output awvalid_1;
  wire awvalid_1;
  (* src = "user_subsys.all.v:43.38-43.47" *)
  output awvalid_2;
  wire awvalid_2;
  (* src = "user_subsys.all.v:47.38-47.47" *)
  output awvalid_3;
  wire awvalid_3;
  (* src = "user_subsys.all.v:54.38-54.48" *)
  input [14:0] axi_araddr;
  wire [14:0] axi_araddr;
  (* src = "user_subsys.all.v:61.38-61.49" *)
  output axi_arready;
  wire axi_arready;
  (* src = "user_subsys.all.v:53.38-53.49" *)
  input axi_arvalid;
  wire axi_arvalid;
  (* src = "user_subsys.all.v:52.38-52.48" *)
  input [14:0] axi_awaddr;
  wire [14:0] axi_awaddr;
  (* src = "user_subsys.all.v:60.38-60.49" *)
  output axi_awready;
  wire axi_awready;
  (* src = "user_subsys.all.v:51.38-51.49" *)
  input axi_awvalid;
  wire axi_awvalid;
  (* src = "user_subsys.all.v:65.38-65.45" *)
  input axi_clk;
  wire axi_clk;
  (* src = "user_subsys.all.v:64.38-64.47" *)
  output [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "user_subsys.all.v:66.38-66.49" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:58.38-58.48" *)
  input axi_rready;
  wire axi_rready;
  (* src = "user_subsys.all.v:63.38-63.48" *)
  output axi_rvalid;
  wire axi_rvalid;
  (* src = "user_subsys.all.v:57.38-57.47" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "user_subsys.all.v:62.38-62.48" *)
  output axi_wready;
  wire axi_wready;
  (* src = "user_subsys.all.v:56.38-56.47" *)
  input [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "user_subsys.all.v:55.38-55.48" *)
  input axi_wvalid;
  wire axi_wvalid;
  (* src = "user_subsys.all.v:59.38-59.50" *)
  input cc_up_enable;
  wire cc_up_enable;
  (* src = "user_subsys.all.v:15.38-15.45" *)
  input [31:0] rdata_0;
  wire [31:0] rdata_0;
  (* src = "user_subsys.all.v:20.38-20.45" *)
  input [31:0] rdata_1;
  wire [31:0] rdata_1;
  (* src = "user_subsys.all.v:25.38-25.45" *)
  input [31:0] rdata_2;
  wire [31:0] rdata_2;
  (* src = "user_subsys.all.v:30.38-30.45" *)
  input [31:0] rdata_3;
  wire [31:0] rdata_3;
  (* src = "user_subsys.all.v:38.38-38.44" *)
  output rready;
  wire rready;
  (* src = "user_subsys.all.v:14.38-14.46" *)
  input rvalid_0;
  wire rvalid_0;
  (* src = "user_subsys.all.v:19.38-19.46" *)
  input rvalid_1;
  wire rvalid_1;
  (* src = "user_subsys.all.v:24.38-24.46" *)
  input rvalid_2;
  wire rvalid_2;
  (* src = "user_subsys.all.v:29.38-29.46" *)
  input rvalid_3;
  wire rvalid_3;
  (* src = "user_subsys.all.v:67.38-67.50" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  (* src = "user_subsys.all.v:37.38-37.43" *)
  output [31:0] wdata;
  wire [31:0] wdata;
  (* src = "user_subsys.all.v:13.38-13.46" *)
  input wready_0;
  wire wready_0;
  (* src = "user_subsys.all.v:18.38-18.46" *)
  input wready_1;
  wire wready_1;
  (* src = "user_subsys.all.v:23.38-23.46" *)
  input wready_2;
  wire wready_2;
  (* src = "user_subsys.all.v:28.38-28.46" *)
  input wready_3;
  wire wready_3;
  (* src = "user_subsys.all.v:36.38-36.45" *)
  output [3:0] wstrb_0;
  wire [3:0] wstrb_0;
  (* src = "user_subsys.all.v:42.38-42.45" *)
  output [3:0] wstrb_1;
  wire [3:0] wstrb_1;
  (* src = "user_subsys.all.v:46.38-46.45" *)
  output [3:0] wstrb_2;
  wire [3:0] wstrb_2;
  (* src = "user_subsys.all.v:50.38-50.45" *)
  output [3:0] wstrb_3;
  wire [3:0] wstrb_3;
  (* src = "user_subsys.all.v:35.38-35.46" *)
  output wvalid_0;
  wire wvalid_0;
  (* src = "user_subsys.all.v:41.38-41.46" *)
  output wvalid_1;
  wire wvalid_1;
  (* src = "user_subsys.all.v:45.38-45.46" *)
  output wvalid_2;
  wire wvalid_2;
  (* src = "user_subsys.all.v:49.38-49.46" *)
  output wvalid_3;
  wire wvalid_3;
  assign araddr = 12'h000;
  assign arvalid_0 = 1'h0;
  assign arvalid_1 = 1'h0;
  assign arvalid_2 = 1'h0;
  assign arvalid_3 = 1'h0;
  assign awaddr = 12'h000;
  assign awvalid_0 = 1'h0;
  assign awvalid_1 = 1'h0;
  assign awvalid_2 = 1'h0;
  assign awvalid_3 = 1'h0;
  assign axi_arready = 1'h0;
  assign axi_awready = 1'h0;
  assign axi_rdata = 32'd0;
  assign axi_rvalid = 1'h0;
  assign axi_wready = 1'h0;
  assign rready = 1'h0;
  assign wdata = 32'd0;
  assign wstrb_0 = 4'h0;
  assign wstrb_1 = 4'h0;
  assign wstrb_2 = 4'h0;
  assign wstrb_3 = 4'h0;
  assign wvalid_0 = 1'h0;
  assign wvalid_1 = 1'h0;
  assign wvalid_2 = 1'h0;
  assign wvalid_3 = 1'h0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\AXIS_MSTR" *)
(* src = "user_subsys.all.v:105.1-157.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_MSTR (sm_tready, sm_tvalid_0, sm_tdata_0, sm_tid_0, sm_tstrb_0, sm_tkeep_0, sm_tlast_0, sm_tvalid_1, sm_tdata_1, sm_tid_1, sm_tstrb_1, sm_tkeep_1, sm_tlast_1, sm_tvalid_2, sm_tdata_2, sm_tid_2, sm_tstrb_2, sm_tkeep_2, sm_tlast_2, sm_tvalid_3, sm_tdata_3
, sm_tid_3, sm_tstrb_3, sm_tkeep_3, sm_tlast_3, m_tready, m_tvalid, m_tdata, m_tuser, m_tstrb, m_tkeep, m_tlast, axis_clk, axi_reset_n, axis_rst_n, user_prj_sel);
  (* src = "user_subsys.all.v:142.38-142.49" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:141.38-141.46" *)
  input axis_clk;
  wire axis_clk;
  (* src = "user_subsys.all.v:143.38-143.48" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:136.38-136.45" *)
  output [31:0] m_tdata;
  wire [31:0] m_tdata;
  (* src = "user_subsys.all.v:139.38-139.45" *)
  output [3:0] m_tkeep;
  wire [3:0] m_tkeep;
  (* src = "user_subsys.all.v:140.38-140.45" *)
  output m_tlast;
  wire m_tlast;
  (* src = "user_subsys.all.v:134.38-134.46" *)
  input m_tready;
  wire m_tready;
  (* src = "user_subsys.all.v:138.38-138.45" *)
  output [3:0] m_tstrb;
  wire [3:0] m_tstrb;
  (* src = "user_subsys.all.v:137.38-137.45" *)
  output [1:0] m_tuser;
  wire [1:0] m_tuser;
  (* src = "user_subsys.all.v:135.38-135.46" *)
  output m_tvalid;
  wire m_tvalid;
  (* src = "user_subsys.all.v:111.38-111.48" *)
  input [31:0] sm_tdata_0;
  wire [31:0] sm_tdata_0;
  (* src = "user_subsys.all.v:117.38-117.48" *)
  input [31:0] sm_tdata_1;
  wire [31:0] sm_tdata_1;
  (* src = "user_subsys.all.v:123.38-123.48" *)
  input [31:0] sm_tdata_2;
  wire [31:0] sm_tdata_2;
  (* src = "user_subsys.all.v:129.38-129.48" *)
  input [31:0] sm_tdata_3;
  wire [31:0] sm_tdata_3;
  (* src = "user_subsys.all.v:112.38-112.46" *)
  input [2:0] sm_tid_0;
  wire [2:0] sm_tid_0;
  (* src = "user_subsys.all.v:118.38-118.46" *)
  input [2:0] sm_tid_1;
  wire [2:0] sm_tid_1;
  (* src = "user_subsys.all.v:124.38-124.46" *)
  input [2:0] sm_tid_2;
  wire [2:0] sm_tid_2;
  (* src = "user_subsys.all.v:130.38-130.46" *)
  input [2:0] sm_tid_3;
  wire [2:0] sm_tid_3;
  (* src = "user_subsys.all.v:114.38-114.48" *)
  input sm_tkeep_0;
  wire sm_tkeep_0;
  (* src = "user_subsys.all.v:120.38-120.48" *)
  input sm_tkeep_1;
  wire sm_tkeep_1;
  (* src = "user_subsys.all.v:126.38-126.48" *)
  input sm_tkeep_2;
  wire sm_tkeep_2;
  (* src = "user_subsys.all.v:132.38-132.48" *)
  input sm_tkeep_3;
  wire sm_tkeep_3;
  (* src = "user_subsys.all.v:115.38-115.48" *)
  input sm_tlast_0;
  wire sm_tlast_0;
  (* src = "user_subsys.all.v:121.38-121.48" *)
  input sm_tlast_1;
  wire sm_tlast_1;
  (* src = "user_subsys.all.v:127.38-127.48" *)
  input sm_tlast_2;
  wire sm_tlast_2;
  (* src = "user_subsys.all.v:133.38-133.48" *)
  input sm_tlast_3;
  wire sm_tlast_3;
  (* src = "user_subsys.all.v:109.38-109.47" *)
  output sm_tready;
  wire sm_tready;
  (* src = "user_subsys.all.v:113.38-113.48" *)
  input [3:0] sm_tstrb_0;
  wire [3:0] sm_tstrb_0;
  (* src = "user_subsys.all.v:119.38-119.48" *)
  input [3:0] sm_tstrb_1;
  wire [3:0] sm_tstrb_1;
  (* src = "user_subsys.all.v:125.38-125.48" *)
  input [3:0] sm_tstrb_2;
  wire [3:0] sm_tstrb_2;
  (* src = "user_subsys.all.v:131.38-131.48" *)
  input [3:0] sm_tstrb_3;
  wire [3:0] sm_tstrb_3;
  (* src = "user_subsys.all.v:110.38-110.49" *)
  input sm_tvalid_0;
  wire sm_tvalid_0;
  (* src = "user_subsys.all.v:116.38-116.49" *)
  input sm_tvalid_1;
  wire sm_tvalid_1;
  (* src = "user_subsys.all.v:122.38-122.49" *)
  input sm_tvalid_2;
  wire sm_tvalid_2;
  (* src = "user_subsys.all.v:128.38-128.49" *)
  input sm_tvalid_3;
  wire sm_tvalid_3;
  (* src = "user_subsys.all.v:144.38-144.50" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  assign m_tdata = 32'd0;
  assign m_tkeep = 4'h0;
  assign m_tlast = 1'h0;
  assign m_tstrb = 4'h0;
  assign m_tuser = 2'h0;
  assign m_tvalid = 1'h0;
  assign sm_tready = 1'h0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\AXIS_SLAV" *)
(* src = "user_subsys.all.v:164.1-207.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_SLAV (ss_tvalid_0, ss_tdata, ss_tuser, ss_tstrb, ss_tkeep, ss_tlast, ss_tvalid_1, ss_tvalid_2, ss_tvalid_3, ss_tready_0, ss_tready_1, ss_tready_2, ss_tready_3, s_tvalid, s_tdata, s_tuser, s_tstrb, s_tkeep, s_tlast, s_tready, axis_clk
, axi_reset_n, axis_rst_n, user_prj_sel);
  (* src = "user_subsys.all.v:189.38-189.49" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:188.38-188.46" *)
  input axis_clk;
  wire axis_clk;
  (* src = "user_subsys.all.v:190.38-190.48" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:182.38-182.45" *)
  input [31:0] s_tdata;
  wire [31:0] s_tdata;
  (* src = "user_subsys.all.v:185.38-185.45" *)
  input [3:0] s_tkeep;
  wire [3:0] s_tkeep;
  (* src = "user_subsys.all.v:186.38-186.45" *)
  input s_tlast;
  wire s_tlast;
  (* src = "user_subsys.all.v:187.38-187.46" *)
  output s_tready;
  wire s_tready;
  (* src = "user_subsys.all.v:184.38-184.45" *)
  input [3:0] s_tstrb;
  wire [3:0] s_tstrb;
  (* src = "user_subsys.all.v:183.38-183.45" *)
  input [1:0] s_tuser;
  wire [1:0] s_tuser;
  (* src = "user_subsys.all.v:181.38-181.46" *)
  input s_tvalid;
  wire s_tvalid;
  (* src = "user_subsys.all.v:169.38-169.46" *)
  output [31:0] ss_tdata;
  wire [31:0] ss_tdata;
  (* src = "user_subsys.all.v:172.38-172.46" *)
  output [3:0] ss_tkeep;
  wire [3:0] ss_tkeep;
  (* src = "user_subsys.all.v:173.38-173.46" *)
  output ss_tlast;
  wire ss_tlast;
  (* src = "user_subsys.all.v:177.38-177.49" *)
  input ss_tready_0;
  wire ss_tready_0;
  (* src = "user_subsys.all.v:178.38-178.49" *)
  input ss_tready_1;
  wire ss_tready_1;
  (* src = "user_subsys.all.v:179.38-179.49" *)
  input ss_tready_2;
  wire ss_tready_2;
  (* src = "user_subsys.all.v:180.38-180.49" *)
  input ss_tready_3;
  wire ss_tready_3;
  (* src = "user_subsys.all.v:171.38-171.46" *)
  output [3:0] ss_tstrb;
  wire [3:0] ss_tstrb;
  (* src = "user_subsys.all.v:170.38-170.46" *)
  output [1:0] ss_tuser;
  wire [1:0] ss_tuser;
  (* src = "user_subsys.all.v:168.38-168.49" *)
  output ss_tvalid_0;
  wire ss_tvalid_0;
  (* src = "user_subsys.all.v:174.38-174.49" *)
  output ss_tvalid_1;
  wire ss_tvalid_1;
  (* src = "user_subsys.all.v:175.38-175.49" *)
  output ss_tvalid_2;
  wire ss_tvalid_2;
  (* src = "user_subsys.all.v:176.38-176.49" *)
  output ss_tvalid_3;
  wire ss_tvalid_3;
  (* src = "user_subsys.all.v:191.38-191.50" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  assign s_tready = 1'h0;
  assign ss_tdata = 32'd0;
  assign ss_tkeep = 4'h0;
  assign ss_tlast = 1'h0;
  assign ss_tstrb = 4'h0;
  assign ss_tuser = 2'h0;
  assign ss_tvalid_0 = 1'h0;
  assign ss_tvalid_1 = 1'h0;
  assign ss_tvalid_2 = 1'h0;
  assign ss_tvalid_3 = 1'h0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\AXIS_SW" *)
(* src = "sw_caravel.v.patch:20.1-136.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_SW (axi_reset_n, axis_clk, axis_rst_n, axi_awvalid, axi_awaddr, axi_awready, axi_wvalid, axi_wdata, axi_wstrb, axi_wready, axi_arvalid, axi_araddr, axi_arready, axi_rvalid, axi_rdata, axi_rready, cc_as_enable, up_as_tdata, up_as_tstrb, up_as_tkeep, up_as_tlast
, up_as_tvalid, up_as_tuser, up_hpri_req, as_up_tready, aa_as_tdata, aa_as_tstrb, aa_as_tkeep, aa_as_tlast, aa_as_tvalid, aa_as_tuser, as_aa_tready, la_as_tdata, la_as_tstrb, la_as_tkeep, la_as_tlast, la_as_tvalid, la_as_tuser, la_hpri_req, as_la_tready, as_is_tdata, as_is_tstrb
, as_is_tkeep, as_is_tlast, as_is_tid, as_is_tvalid, as_is_tuser, is_as_tready, is_as_tdata, is_as_tstrb, is_as_tkeep, is_as_tlast, is_as_tid, is_as_tvalid, is_as_tuser, as_is_tready, as_up_tdata, as_up_tstrb, as_up_tkeep, as_up_tlast, as_up_tvalid, as_up_tuser, up_as_tready
, as_aa_tdata, as_aa_tstrb, as_aa_tkeep, as_aa_tlast, as_aa_tvalid, as_aa_tuser, aa_as_tready);
  (* src = "sw_caravel.v.patch:56.45-56.56" *)
  input [31:0] aa_as_tdata;
  wire [31:0] aa_as_tdata;
  (* src = "sw_caravel.v.patch:58.45-58.56" *)
  input [3:0] aa_as_tkeep;
  wire [3:0] aa_as_tkeep;
  (* src = "sw_caravel.v.patch:59.45-59.56" *)
  input aa_as_tlast;
  wire aa_as_tlast;
  (* src = "sw_caravel.v.patch:106.45-106.57" *)
  input aa_as_tready;
  wire aa_as_tready;
  (* src = "sw_caravel.v.patch:57.45-57.56" *)
  input [3:0] aa_as_tstrb;
  wire [3:0] aa_as_tstrb;
  (* src = "sw_caravel.v.patch:61.45-61.56" *)
  input [1:0] aa_as_tuser;
  wire [1:0] aa_as_tuser;
  (* src = "sw_caravel.v.patch:60.45-60.57" *)
  input aa_as_tvalid;
  wire aa_as_tvalid;
  (* src = "sw_caravel.v.patch:100.45-100.56" *)
  output [31:0] as_aa_tdata;
  wire [31:0] as_aa_tdata;
  (* src = "sw_caravel.v.patch:102.45-102.56" *)
  output [3:0] as_aa_tkeep;
  wire [3:0] as_aa_tkeep;
  (* src = "sw_caravel.v.patch:103.45-103.56" *)
  output as_aa_tlast;
  wire as_aa_tlast;
  (* src = "sw_caravel.v.patch:62.45-62.57" *)
  output as_aa_tready;
  wire as_aa_tready;
  (* src = "sw_caravel.v.patch:101.45-101.56" *)
  output [3:0] as_aa_tstrb;
  wire [3:0] as_aa_tstrb;
  (* src = "sw_caravel.v.patch:105.45-105.56" *)
  output [1:0] as_aa_tuser;
  wire [1:0] as_aa_tuser;
  (* src = "sw_caravel.v.patch:104.45-104.57" *)
  output as_aa_tvalid;
  wire as_aa_tvalid;
  (* src = "sw_caravel.v.patch:73.45-73.56" *)
  output [31:0] as_is_tdata;
  wire [31:0] as_is_tdata;
  (* src = "sw_caravel.v.patch:77.45-77.54" *)
  output [1:0] as_is_tid;
  wire [1:0] as_is_tid;
  (* src = "sw_caravel.v.patch:75.45-75.56" *)
  output [3:0] as_is_tkeep;
  wire [3:0] as_is_tkeep;
  (* src = "sw_caravel.v.patch:76.45-76.56" *)
  output as_is_tlast;
  wire as_is_tlast;
  (* src = "sw_caravel.v.patch:90.45-90.57" *)
  output as_is_tready;
  wire as_is_tready;
  (* src = "sw_caravel.v.patch:74.45-74.56" *)
  output [3:0] as_is_tstrb;
  wire [3:0] as_is_tstrb;
  (* src = "sw_caravel.v.patch:79.45-79.56" *)
  output [1:0] as_is_tuser;
  wire [1:0] as_is_tuser;
  (* src = "sw_caravel.v.patch:78.45-78.57" *)
  output as_is_tvalid;
  wire as_is_tvalid;
  (* src = "sw_caravel.v.patch:71.45-71.57" *)
  output as_la_tready;
  wire as_la_tready;
  (* src = "sw_caravel.v.patch:92.45-92.56" *)
  output [31:0] as_up_tdata;
  wire [31:0] as_up_tdata;
  (* src = "sw_caravel.v.patch:94.45-94.56" *)
  output [3:0] as_up_tkeep;
  wire [3:0] as_up_tkeep;
  (* src = "sw_caravel.v.patch:95.45-95.56" *)
  output as_up_tlast;
  wire as_up_tlast;
  (* src = "sw_caravel.v.patch:54.45-54.57" *)
  output as_up_tready;
  wire as_up_tready;
  (* src = "sw_caravel.v.patch:93.45-93.56" *)
  output [3:0] as_up_tstrb;
  wire [3:0] as_up_tstrb;
  (* src = "sw_caravel.v.patch:97.45-97.56" *)
  output [1:0] as_up_tuser;
  wire [1:0] as_up_tuser;
  (* src = "sw_caravel.v.patch:96.45-96.57" *)
  output as_up_tvalid;
  wire as_up_tvalid;
  (* src = "sw_caravel.v.patch:39.21-39.31" *)
  input [14:0] axi_araddr;
  wire [14:0] axi_araddr;
  (* src = "sw_caravel.v.patch:40.14-40.25" *)
  output axi_arready;
  wire axi_arready;
  (* src = "sw_caravel.v.patch:38.14-38.25" *)
  input axi_arvalid;
  wire axi_arvalid;
  (* src = "sw_caravel.v.patch:30.24-30.34" *)
  input [14:0] axi_awaddr;
  wire [14:0] axi_awaddr;
  (* src = "sw_caravel.v.patch:31.14-31.25" *)
  output axi_awready;
  wire axi_awready;
  (* src = "sw_caravel.v.patch:29.17-29.28" *)
  input axi_awvalid;
  wire axi_awvalid;
  (* src = "sw_caravel.v.patch:43.32-43.41" *)
  output [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "sw_caravel.v.patch:24.45-24.56" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "sw_caravel.v.patch:44.14-44.24" *)
  input axi_rready;
  wire axi_rready;
  (* src = "sw_caravel.v.patch:42.14-42.24" *)
  output axi_rvalid;
  wire axi_rvalid;
  (* src = "sw_caravel.v.patch:34.32-34.41" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "sw_caravel.v.patch:36.14-36.24" *)
  output axi_wready;
  wire axi_wready;
  (* src = "sw_caravel.v.patch:35.36-35.45" *)
  input [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "sw_caravel.v.patch:33.14-33.24" *)
  input axi_wvalid;
  wire axi_wvalid;
  (* src = "sw_caravel.v.patch:25.45-25.53" *)
  input axis_clk;
  wire axis_clk;
  (* src = "sw_caravel.v.patch:26.45-26.55" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "sw_caravel.v.patch:45.14-45.26" *)
  input cc_as_enable;
  wire cc_as_enable;
  (* src = "sw_caravel.v.patch:83.45-83.56" *)
  input [31:0] is_as_tdata;
  wire [31:0] is_as_tdata;
  (* src = "sw_caravel.v.patch:87.45-87.54" *)
  input [1:0] is_as_tid;
  wire [1:0] is_as_tid;
  (* src = "sw_caravel.v.patch:85.45-85.56" *)
  input [3:0] is_as_tkeep;
  wire [3:0] is_as_tkeep;
  (* src = "sw_caravel.v.patch:86.45-86.56" *)
  input is_as_tlast;
  wire is_as_tlast;
  (* src = "sw_caravel.v.patch:80.43-80.55" *)
  input is_as_tready;
  wire is_as_tready;
  (* src = "sw_caravel.v.patch:84.45-84.56" *)
  input [3:0] is_as_tstrb;
  wire [3:0] is_as_tstrb;
  (* src = "sw_caravel.v.patch:89.45-89.56" *)
  input [1:0] is_as_tuser;
  wire [1:0] is_as_tuser;
  (* src = "sw_caravel.v.patch:88.45-88.57" *)
  input is_as_tvalid;
  wire is_as_tvalid;
  (* src = "sw_caravel.v.patch:64.45-64.56" *)
  input [31:0] la_as_tdata;
  wire [31:0] la_as_tdata;
  (* src = "sw_caravel.v.patch:66.45-66.56" *)
  input [3:0] la_as_tkeep;
  wire [3:0] la_as_tkeep;
  (* src = "sw_caravel.v.patch:67.45-67.56" *)
  input la_as_tlast;
  wire la_as_tlast;
  (* src = "sw_caravel.v.patch:65.45-65.56" *)
  input [3:0] la_as_tstrb;
  wire [3:0] la_as_tstrb;
  (* src = "sw_caravel.v.patch:69.45-69.56" *)
  input [1:0] la_as_tuser;
  wire [1:0] la_as_tuser;
  (* src = "sw_caravel.v.patch:68.45-68.57" *)
  input la_as_tvalid;
  wire la_as_tvalid;
  (* src = "sw_caravel.v.patch:70.42-70.53" *)
  input la_hpri_req;
  wire la_hpri_req;
  (* src = "sw_caravel.v.patch:47.45-47.56" *)
  input [31:0] up_as_tdata;
  wire [31:0] up_as_tdata;
  (* src = "sw_caravel.v.patch:49.45-49.56" *)
  input [3:0] up_as_tkeep;
  wire [3:0] up_as_tkeep;
  (* src = "sw_caravel.v.patch:50.45-50.56" *)
  input up_as_tlast;
  wire up_as_tlast;
  (* src = "sw_caravel.v.patch:98.45-98.57" *)
  input up_as_tready;
  wire up_as_tready;
  (* src = "sw_caravel.v.patch:48.45-48.56" *)
  input [3:0] up_as_tstrb;
  wire [3:0] up_as_tstrb;
  (* src = "sw_caravel.v.patch:52.45-52.56" *)
  input [1:0] up_as_tuser;
  wire [1:0] up_as_tuser;
  (* src = "sw_caravel.v.patch:51.45-51.57" *)
  input up_as_tvalid;
  wire up_as_tvalid;
  (* src = "sw_caravel.v.patch:53.42-53.53" *)
  input up_hpri_req;
  wire up_hpri_req;
  assign as_aa_tdata = 32'd0;
  assign as_aa_tkeep = 4'h0;
  assign as_aa_tlast = 1'h0;
  assign as_aa_tready = 1'h0;
  assign as_aa_tstrb = 4'h0;
  assign as_aa_tuser = 2'h0;
  assign as_aa_tvalid = 1'h0;
  assign as_is_tdata = 32'd0;
  assign as_is_tid = 2'h0;
  assign as_is_tkeep = 4'h0;
  assign as_is_tlast = 1'h0;
  assign as_is_tready = 1'h0;
  assign as_is_tstrb = 4'h0;
  assign as_is_tuser = 2'h0;
  assign as_is_tvalid = 1'h0;
  assign as_la_tready = 1'h0;
  assign as_up_tdata = 32'd0;
  assign as_up_tkeep = 4'h0;
  assign as_up_tlast = 1'h0;
  assign as_up_tready = 1'h0;
  assign as_up_tstrb = 4'h0;
  assign as_up_tuser = 2'h0;
  assign as_up_tvalid = 1'h0;
  assign axi_arready = 1'h0;
  assign axi_awready = 1'h0;
  assign axi_rdata = 32'd0;
  assign axi_rvalid = 1'h0;
  assign axi_wready = 1'h0;
endmodule

(* hdlname = "\\LA_MUX" *)
(* src = "user_subsys.all.v:245.1-268.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\LA_MUX (la_data_i, la_data_0, la_data_1, la_data_2, la_data_3, la_up_data, up_la_data, axi_clk, axis_clk, axi_reset_n, axis_rst_n, user_prj_sel);
  (* src = "user_subsys.all.v:256.24-256.31" *)
  input axi_clk;
  wire axi_clk;
  (* src = "user_subsys.all.v:258.24-258.35" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:257.24-257.32" *)
  input axis_clk;
  wire axis_clk;
  (* src = "user_subsys.all.v:259.24-259.34" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:250.24-250.33" *)
  input [63:0] la_data_0;
  wire [63:0] la_data_0;
  (* src = "user_subsys.all.v:251.24-251.33" *)
  input [63:0] la_data_1;
  wire [63:0] la_data_1;
  (* src = "user_subsys.all.v:252.24-252.33" *)
  input [63:0] la_data_2;
  wire [63:0] la_data_2;
  (* src = "user_subsys.all.v:253.24-253.33" *)
  input [63:0] la_data_3;
  wire [63:0] la_data_3;
  (* src = "user_subsys.all.v:249.24-249.33" *)
  output [63:0] la_data_i;
  wire [63:0] la_data_i;
  (* src = "user_subsys.all.v:254.24-254.34" *)
  input [63:0] la_up_data;
  wire [63:0] la_up_data;
  (* src = "user_subsys.all.v:255.24-255.34" *)
  output [63:0] up_la_data;
  wire [63:0] up_la_data;
  (* src = "user_subsys.all.v:260.24-260.36" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  assign la_data_i = 64'h0000000000000000;
  assign up_la_data = 64'h0000000000000000;
endmodule

(* hdlname = "\\LOGIC_ANLZ" *)
(* src = "logic_anlz.dummy_io.vd:7.1-63.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\LOGIC_ANLZ (axi_awready, axi_wready, axi_arready, axi_rdata, axi_rvalid, m_tdata, m_tstrb, m_tkeep, m_tlast, m_tvalid, m_tuser, la_hpri_req, axi_awvalid, axi_awaddr, axi_wvalid, axi_wdata, axi_wstrb, axi_arvalid, axi_araddr, axi_rready, cc_la_enable
, m_tready, up_la_data, la_up_data, la_data_in, la_oenb, la_data_out, user_clock2, axi_clk, axi_reset_n, axis_clk, uck2_rst_n, axis_rst_n);
  (* src = "logic_anlz.dummy_io.vd:29.25-29.35" *)
  input [14:0] axi_araddr;
  wire [14:0] axi_araddr;
  (* src = "logic_anlz.dummy_io.vd:13.25-13.36" *)
  output axi_arready;
  wire axi_arready;
  (* src = "logic_anlz.dummy_io.vd:28.25-28.36" *)
  input axi_arvalid;
  wire axi_arvalid;
  (* src = "logic_anlz.dummy_io.vd:24.25-24.35" *)
  input [14:0] axi_awaddr;
  wire [14:0] axi_awaddr;
  (* src = "logic_anlz.dummy_io.vd:11.25-11.36" *)
  output axi_awready;
  wire axi_awready;
  (* src = "logic_anlz.dummy_io.vd:23.25-23.36" *)
  input axi_awvalid;
  wire axi_awvalid;
  (* src = "logic_anlz.dummy_io.vd:39.25-39.32" *)
  input axi_clk;
  wire axi_clk;
  (* src = "logic_anlz.dummy_io.vd:14.25-14.34" *)
  output [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "logic_anlz.dummy_io.vd:40.25-40.36" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "logic_anlz.dummy_io.vd:30.25-30.35" *)
  input axi_rready;
  wire axi_rready;
  (* src = "logic_anlz.dummy_io.vd:15.25-15.35" *)
  output axi_rvalid;
  wire axi_rvalid;
  (* src = "logic_anlz.dummy_io.vd:26.25-26.34" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "logic_anlz.dummy_io.vd:12.25-12.35" *)
  output axi_wready;
  wire axi_wready;
  (* src = "logic_anlz.dummy_io.vd:27.25-27.34" *)
  input [3:0] axi_wstrb;
  wire [3:0] axi_wstrb;
  (* src = "logic_anlz.dummy_io.vd:25.25-25.35" *)
  input axi_wvalid;
  wire axi_wvalid;
  (* src = "logic_anlz.dummy_io.vd:41.25-41.33" *)
  input axis_clk;
  wire axis_clk;
  (* src = "logic_anlz.dummy_io.vd:43.25-43.35" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "logic_anlz.dummy_io.vd:31.25-31.37" *)
  input cc_la_enable;
  wire cc_la_enable;
  (* src = "logic_anlz.dummy_io.vd:35.25-35.35" *)
  input [127:0] la_data_in;
  wire [127:0] la_data_in;
  (* src = "logic_anlz.dummy_io.vd:37.25-37.36" *)
  output [127:0] la_data_out;
  wire [127:0] la_data_out;
  (* src = "logic_anlz.dummy_io.vd:22.25-22.36" *)
  output la_hpri_req;
  wire la_hpri_req;
  (* src = "logic_anlz.dummy_io.vd:36.25-36.32" *)
  input [127:0] la_oenb;
  wire [127:0] la_oenb;
  (* src = "logic_anlz.dummy_io.vd:34.25-34.35" *)
  output [63:0] la_up_data;
  wire [63:0] la_up_data;
  (* src = "logic_anlz.dummy_io.vd:16.25-16.32" *)
  output [31:0] m_tdata;
  wire [31:0] m_tdata;
  (* src = "logic_anlz.dummy_io.vd:18.25-18.32" *)
  output [3:0] m_tkeep;
  wire [3:0] m_tkeep;
  (* src = "logic_anlz.dummy_io.vd:19.25-19.32" *)
  output m_tlast;
  wire m_tlast;
  (* src = "logic_anlz.dummy_io.vd:32.25-32.33" *)
  input m_tready;
  wire m_tready;
  (* src = "logic_anlz.dummy_io.vd:17.25-17.32" *)
  output [3:0] m_tstrb;
  wire [3:0] m_tstrb;
  (* src = "logic_anlz.dummy_io.vd:21.25-21.32" *)
  output [1:0] m_tuser;
  wire [1:0] m_tuser;
  (* src = "logic_anlz.dummy_io.vd:20.25-20.33" *)
  output m_tvalid;
  wire m_tvalid;
  (* src = "logic_anlz.dummy_io.vd:42.25-42.35" *)
  input uck2_rst_n;
  wire uck2_rst_n;
  (* src = "logic_anlz.dummy_io.vd:33.25-33.35" *)
  input [63:0] up_la_data;
  wire [63:0] up_la_data;
  (* src = "logic_anlz.dummy_io.vd:38.25-38.36" *)
  input user_clock2;
  wire user_clock2;
  assign axi_arready = 1'h0;
  assign axi_awready = 1'h0;
  assign axi_rdata = 32'd0;
  assign axi_rvalid = 1'h0;
  assign axi_wready = 1'h0;
  assign la_data_out = 128'h00000000000000000000000000000000;
  assign la_hpri_req = 1'h0;
  assign la_up_data = 64'h0000000000000000;
  assign m_tdata = 32'd0;
  assign m_tkeep = 4'h0;
  assign m_tlast = 1'h0;
  assign m_tstrb = 4'h0;
  assign m_tuser = 2'h0;
  assign m_tvalid = 1'h0;
endmodule

(* hdlname = "\\MPRJ_IO" *)
(* src = "mprj_io.sv:7.1-71.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\MPRJ_IO (serial_rxd, serial_rclk, user_prj_sel, serial_txd, serial_tclk, io_in, vccd1, vccd2, vssd1, vssd2, io_out, io_oeb, io_clk, user_clock2, axi_clk, axi_reset_n, axis_clk, uck2_rst_n, axis_rst_n);
  (* src = "mprj_io.sv:25.24-25.31" *)
  input axi_clk;
  wire axi_clk;
  (* src = "mprj_io.sv:26.24-26.35" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "mprj_io.sv:27.24-27.32" *)
  input axis_clk;
  wire axis_clk;
  (* src = "mprj_io.sv:29.24-29.34" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "mprj_io.sv:23.24-23.30" *)
  output io_clk;
  wire io_clk;
  (* src = "mprj_io.sv:16.24-16.29" *)
  input [37:0] io_in;
  wire [37:0] io_in;
  (* src = "mprj_io.sv:22.24-22.30" *)
  output [37:0] io_oeb;
  wire [37:0] io_oeb;
  (* src = "mprj_io.sv:21.24-21.30" *)
  output [37:0] io_out;
  wire [37:0] io_out;
  (* src = "mprj_io.sv:12.24-12.35" *)
  output serial_rclk;
  wire serial_rclk;
  (* src = "mprj_io.sv:11.24-11.34" *)
  output [11:0] serial_rxd;
  wire [11:0] serial_rxd;
  (* src = "mprj_io.sv:15.24-15.35" *)
  input serial_tclk;
  wire serial_tclk;
  (* src = "mprj_io.sv:14.24-14.34" *)
  input [11:0] serial_txd;
  wire [11:0] serial_txd;
  (* src = "mprj_io.sv:28.24-28.34" *)
  input uck2_rst_n;
  wire uck2_rst_n;
  (* src = "mprj_io.sv:24.24-24.35" *)
  input user_clock2;
  wire user_clock2;
  (* src = "mprj_io.sv:13.24-13.36" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  (* src = "mprj_io.sv:17.24-17.29" *)
  input vccd1;
  wire vccd1;
  (* src = "mprj_io.sv:18.24-18.29" *)
  input vccd2;
  wire vccd2;
  (* src = "mprj_io.sv:19.24-19.29" *)
  input vssd1;
  wire vssd1;
  (* src = "mprj_io.sv:20.24-20.29" *)
  input vssd2;
  wire vssd2;
  assign io_clk = io_in[37];
  assign { io_oeb[37], io_oeb[33:0] } = 35'h0001fff00;
  assign io_out[33:21] = { serial_tclk, serial_txd };
  assign serial_rclk = io_in[20];
  assign serial_rxd = io_in[19:8];
endmodule

(* dynports =  1  *)
(* hdlname = "\\USER_PRJ" *)
(* src = "user_subsys.all.v:275.1-336.10" *)
module \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\USER_PRJ (awready, arready, wready, rvalid, rdata, awvalid, awaddr, arvalid, araddr, wvalid, wstrb, wdata, rready, ss_tvalid, ss_tdata, ss_tuser, ss_tstrb, ss_tkeep, ss_tlast, sm_tready, la_data_i
, ss_tready, sm_tvalid, sm_tdata, sm_tid, sm_tstrb, sm_tkeep, sm_tlast, low__pri_irq, High_pri_req, la_data_o, axi_clk, axis_clk, axi_reset_n, axis_rst_n, user_clock2, uck2_rst_n);
  (* src = "user_subsys.all.v:308.38-308.50" *)
  output High_pri_req;
  wire High_pri_req;
  (* src = "user_subsys.all.v:287.38-287.44" *)
  input [11:0] araddr;
  wire [11:0] araddr;
  (* src = "user_subsys.all.v:280.38-280.45" *)
  output arready;
  wire arready;
  (* src = "user_subsys.all.v:286.38-286.45" *)
  input arvalid;
  wire arvalid;
  (* src = "user_subsys.all.v:285.38-285.44" *)
  input [11:0] awaddr;
  wire [11:0] awaddr;
  (* src = "user_subsys.all.v:279.38-279.45" *)
  output awready;
  wire awready;
  (* src = "user_subsys.all.v:284.38-284.45" *)
  input awvalid;
  wire awvalid;
  (* src = "user_subsys.all.v:310.38-310.45" *)
  input axi_clk;
  wire axi_clk;
  (* src = "user_subsys.all.v:312.38-312.49" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:311.38-311.46" *)
  input axis_clk;
  wire axis_clk;
  (* src = "user_subsys.all.v:313.38-313.48" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:299.38-299.47" *)
  input [63:0] la_data_i;
  wire [63:0] la_data_i;
  (* src = "user_subsys.all.v:309.38-309.47" *)
  output [63:0] la_data_o;
  wire [63:0] la_data_o;
  (* src = "user_subsys.all.v:307.38-307.50" *)
  output low__pri_irq;
  wire low__pri_irq;
  (* src = "user_subsys.all.v:283.38-283.43" *)
  output [31:0] rdata;
  wire [31:0] rdata;
  (* src = "user_subsys.all.v:291.38-291.44" *)
  input rready;
  wire rready;
  (* src = "user_subsys.all.v:282.38-282.44" *)
  output rvalid;
  wire rvalid;
  (* src = "user_subsys.all.v:302.38-302.46" *)
  output [31:0] sm_tdata;
  wire [31:0] sm_tdata;
  (* src = "user_subsys.all.v:303.38-303.44" *)
  output [2:0] sm_tid;
  wire [2:0] sm_tid;
  (* src = "user_subsys.all.v:305.38-305.46" *)
  output sm_tkeep;
  wire sm_tkeep;
  (* src = "user_subsys.all.v:306.38-306.46" *)
  output sm_tlast;
  wire sm_tlast;
  (* src = "user_subsys.all.v:298.38-298.47" *)
  input sm_tready;
  wire sm_tready;
  (* src = "user_subsys.all.v:304.38-304.46" *)
  output [3:0] sm_tstrb;
  wire [3:0] sm_tstrb;
  (* src = "user_subsys.all.v:301.38-301.47" *)
  output sm_tvalid;
  wire sm_tvalid;
  (* src = "user_subsys.all.v:293.38-293.46" *)
  input [31:0] ss_tdata;
  wire [31:0] ss_tdata;
  (* src = "user_subsys.all.v:296.38-296.46" *)
  input [3:0] ss_tkeep;
  wire [3:0] ss_tkeep;
  (* src = "user_subsys.all.v:297.38-297.46" *)
  input ss_tlast;
  wire ss_tlast;
  (* src = "user_subsys.all.v:300.38-300.47" *)
  output ss_tready;
  wire ss_tready;
  (* src = "user_subsys.all.v:295.38-295.46" *)
  input [3:0] ss_tstrb;
  wire [3:0] ss_tstrb;
  (* src = "user_subsys.all.v:294.38-294.46" *)
  input [1:0] ss_tuser;
  wire [1:0] ss_tuser;
  (* src = "user_subsys.all.v:292.38-292.47" *)
  input ss_tvalid;
  wire ss_tvalid;
  (* src = "user_subsys.all.v:315.38-315.48" *)
  input uck2_rst_n;
  wire uck2_rst_n;
  (* src = "user_subsys.all.v:314.38-314.49" *)
  input user_clock2;
  wire user_clock2;
  (* src = "user_subsys.all.v:290.38-290.43" *)
  input [31:0] wdata;
  wire [31:0] wdata;
  (* src = "user_subsys.all.v:281.38-281.44" *)
  output wready;
  wire wready;
  (* src = "user_subsys.all.v:289.38-289.43" *)
  input [3:0] wstrb;
  wire [3:0] wstrb;
  (* src = "user_subsys.all.v:288.38-288.44" *)
  input wvalid;
  wire wvalid;
  assign High_pri_req = 1'h0;
  assign arready = 1'h0;
  assign awready = 1'h0;
  assign la_data_o = 64'h0000000000000000;
  assign low__pri_irq = 1'h0;
  assign rdata = 32'd0;
  assign rvalid = 1'h0;
  assign sm_tdata = 32'd0;
  assign sm_tid = 3'h0;
  assign sm_tkeep = 1'h0;
  assign sm_tlast = 1'h0;
  assign sm_tstrb = 4'h0;
  assign sm_tvalid = 1'h0;
  assign ss_tready = 1'h0;
  assign wready = 1'h0;
endmodule

(* hdlname = "\\IRQ_MUX" *)
(* src = "user_subsys.all.v:214.1-238.10" *)
module \$paramod\IRQ_MUX\pADDR_WIDTH=s32'00000000000000000000000000001010 (low__pri_irq_0, High_pri_req_0, low__pri_irq_1, High_pri_req_1, low__pri_irq_2, High_pri_req_2, low__pri_irq_3, High_pri_req_3, low__pri_irq, high_pri_irq, axi_clk, axi_reset_n, axis_rst_n, user_prj_sel);
  (* src = "user_subsys.all.v:218.23-218.37" *)
  input High_pri_req_0;
  wire High_pri_req_0;
  (* src = "user_subsys.all.v:220.23-220.37" *)
  input High_pri_req_1;
  wire High_pri_req_1;
  (* src = "user_subsys.all.v:222.23-222.37" *)
  input High_pri_req_2;
  wire High_pri_req_2;
  (* src = "user_subsys.all.v:224.23-224.37" *)
  input High_pri_req_3;
  wire High_pri_req_3;
  (* src = "user_subsys.all.v:227.23-227.30" *)
  input axi_clk;
  wire axi_clk;
  (* src = "user_subsys.all.v:228.23-228.34" *)
  input axi_reset_n;
  wire axi_reset_n;
  (* src = "user_subsys.all.v:229.23-229.33" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "user_subsys.all.v:226.23-226.35" *)
  output high_pri_irq;
  wire high_pri_irq;
  (* src = "user_subsys.all.v:225.23-225.35" *)
  output low__pri_irq;
  wire low__pri_irq;
  (* src = "user_subsys.all.v:217.23-217.37" *)
  input low__pri_irq_0;
  wire low__pri_irq_0;
  (* src = "user_subsys.all.v:219.23-219.37" *)
  input low__pri_irq_1;
  wire low__pri_irq_1;
  (* src = "user_subsys.all.v:221.23-221.37" *)
  input low__pri_irq_2;
  wire low__pri_irq_2;
  (* src = "user_subsys.all.v:223.23-223.37" *)
  input low__pri_irq_3;
  wire low__pri_irq_3;
  (* src = "user_subsys.all.v:230.23-230.35" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  assign high_pri_irq = 1'h0;
  assign low__pri_irq = 1'h0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\fsic_coreclk_phase_cnt" *)
(* src = "fsic_coreclk_phase_cnt.v:22.1-83.10" *)
module \$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=s32'00000000000000000000000000000100 (axis_rst_n, ioclk, coreclk, phase_cnt_out);
  (* src = "fsic_coreclk_phase_cnt.v:36.5-43.8" *)
  wire _00_;
  (* src = "fsic_coreclk_phase_cnt.v:71.5-81.8" *)
  wire [1:0] _01_;
  (* src = "fsic_coreclk_phase_cnt.v:79.30-79.43" *)
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _02_;
  (* src = "fsic_coreclk_phase_cnt.v:76.19-76.34" *)
  wire _03_;
  (* src = "fsic_coreclk_phase_cnt.v:76.40-76.55" *)
  wire _04_;
  (* src = "fsic_coreclk_phase_cnt.v:76.18-76.56" *)
  wire _05_;
  (* src = "fsic_coreclk_phase_cnt.v:25.15-25.25" *)
  input axis_rst_n;
  wire axis_rst_n;
  (* src = "fsic_coreclk_phase_cnt.v:31.26-31.33" *)
  reg [3:0] clk_seq;
  (* src = "fsic_coreclk_phase_cnt.v:35.6-35.21" *)
  reg core_clk_toggle;
  (* src = "fsic_coreclk_phase_cnt.v:27.15-27.22" *)
  input coreclk;
  wire coreclk;
  (* src = "fsic_coreclk_phase_cnt.v:26.15-26.20" *)
  input ioclk;
  wire ioclk;
  (* src = "fsic_coreclk_phase_cnt.v:32.34-32.43" *)
  reg [1:0] phase_cnt;
  (* src = "fsic_coreclk_phase_cnt.v:28.40-28.53" *)
  output [1:0] phase_cnt_out;
  wire [1:0] phase_cnt_out;
  (* src = "fsic_coreclk_phase_cnt.v:45.6-45.25" *)
  reg pre_core_clk_toggle;
  (* src = "fsic_coreclk_phase_cnt.v:46.6-46.26" *)
  reg sync_core_clk_toggle;
  assign _02_ = phase_cnt + (* src = "fsic_coreclk_phase_cnt.v:79.30-79.43" *) 32'd1;
  assign _03_ = clk_seq == (* src = "fsic_coreclk_phase_cnt.v:76.19-76.34" *) 4'h3;
  assign _04_ = clk_seq == (* src = "fsic_coreclk_phase_cnt.v:76.40-76.55" *) 4'hc;
  assign _05_ = _03_ || (* src = "fsic_coreclk_phase_cnt.v:76.18-76.56" *) _04_;
  assign _00_ = ~ (* src = "fsic_coreclk_phase_cnt.v:41.32-41.48" *) core_clk_toggle;
  (* src = "fsic_coreclk_phase_cnt.v:71.5-81.8" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) phase_cnt <= 2'h0;
    else phase_cnt <= _01_;
  (* src = "fsic_coreclk_phase_cnt.v:60.5-68.8" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) clk_seq <= 4'h0;
    else clk_seq <= { clk_seq[2:0], sync_core_clk_toggle };
  (* src = "fsic_coreclk_phase_cnt.v:48.5-57.8" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) pre_core_clk_toggle <= 1'h0;
    else pre_core_clk_toggle <= core_clk_toggle;
  (* src = "fsic_coreclk_phase_cnt.v:48.5-57.8" *)
  always @(posedge ioclk, negedge axis_rst_n)
    if (!axis_rst_n) sync_core_clk_toggle <= 1'h0;
    else sync_core_clk_toggle <= pre_core_clk_toggle;
  (* src = "fsic_coreclk_phase_cnt.v:36.5-43.8" *)
  always @(posedge coreclk, negedge axis_rst_n)
    if (!axis_rst_n) core_clk_toggle <= 1'h0;
    else core_clk_toggle <= _00_;
  assign _01_ = _05_ ? (* full_case = 32'd1 *) (* src = "fsic_coreclk_phase_cnt.v:76.18-76.56|fsic_coreclk_phase_cnt.v:76.13-79.44" *) 2'h0 : _02_[1:0];
  assign phase_cnt_out = phase_cnt;
endmodule

(* top =  1  *)
(* src = "fsic.vo:7.1-585.10" *)
module FSIC(wb_rst, wb_clk, wbs_adr, wbs_wdata, wbs_sel, wbs_cyc, wbs_stb, wbs_we, la_data_in, la_oenb, io_in, vccd1, vccd2, vssd1, vssd2, wbs_ack, wbs_rdata, la_data_out, user_irq, io_out, io_oeb
, user_clock2);
  (* src = "fsic.vo:98.16-98.27" *)
  wire [31:0] aa_as_tdata;
  (* src = "fsic.vo:100.16-100.27" *)
  wire [3:0] aa_as_tkeep;
  (* src = "fsic.vo:101.16-101.27" *)
  wire aa_as_tlast;
  (* src = "fsic.vo:104.16-104.28" *)
  wire aa_as_tready;
  (* src = "fsic.vo:99.16-99.27" *)
  wire [3:0] aa_as_tstrb;
  (* src = "fsic.vo:103.16-103.27" *)
  wire [1:0] aa_as_tuser;
  (* src = "fsic.vo:102.16-102.28" *)
  wire aa_as_tvalid;
  (* src = "fsic.vo:80.16-80.40" *)
  wire aa_cfg_arready_m_arready;
  (* src = "fsic.vo:78.16-78.40" *)
  wire aa_cfg_awready_m_awready;
  (* src = "fsic.vo:76.16-76.36" *)
  wire [31:0] aa_cfg_rdata_m_rdata;
  (* src = "fsic.vo:77.16-77.38" *)
  wire aa_cfg_rvalid_m_rvalid;
  (* src = "fsic.vo:79.16-79.38" *)
  wire aa_cfg_wready_m_wready;
  (* src = "fsic.vo:82.16-82.27" *)
  wire [31:0] as_aa_tdata;
  (* src = "fsic.vo:84.16-84.27" *)
  wire [3:0] as_aa_tkeep;
  (* src = "fsic.vo:85.16-85.27" *)
  wire as_aa_tlast;
  (* src = "fsic.vo:88.16-88.28" *)
  wire as_aa_tready;
  (* src = "fsic.vo:83.16-83.27" *)
  wire [3:0] as_aa_tstrb;
  (* src = "fsic.vo:87.16-87.27" *)
  wire [1:0] as_aa_tuser;
  (* src = "fsic.vo:86.16-86.28" *)
  wire as_aa_tvalid;
  (* src = "fsic.vo:129.16-129.27" *)
  wire [31:0] as_is_tdata;
  (* src = "fsic.vo:133.16-133.25" *)
  wire [1:0] as_is_tid;
  (* src = "fsic.vo:131.16-131.27" *)
  wire [3:0] as_is_tkeep;
  (* src = "fsic.vo:132.16-132.27" *)
  wire as_is_tlast;
  (* src = "fsic.vo:136.16-136.28" *)
  wire as_is_tready;
  (* src = "fsic.vo:130.16-130.27" *)
  wire [3:0] as_is_tstrb;
  (* src = "fsic.vo:135.16-135.27" *)
  wire [1:0] as_is_tuser;
  (* src = "fsic.vo:134.16-134.28" *)
  wire as_is_tvalid;
  (* src = "fsic.vo:141.16-141.37" *)
  wire as_la_tready_m_tready;
  (* src = "fsic.vo:145.16-145.35" *)
  wire [31:0] as_up_tdata_s_tdata;
  (* src = "fsic.vo:147.16-147.35" *)
  wire [3:0] as_up_tkeep_s_tkeep;
  (* src = "fsic.vo:148.16-148.35" *)
  wire as_up_tlast_s_tlast;
  (* src = "fsic.vo:151.16-151.37" *)
  wire as_up_tready_m_tready;
  (* src = "fsic.vo:146.16-146.35" *)
  wire [3:0] as_up_tstrb_s_tstrb;
  (* src = "fsic.vo:150.16-150.35" *)
  wire [1:0] as_up_tuser_s_tuser;
  (* src = "fsic.vo:149.16-149.37" *)
  wire as_up_tvalid_s_tvalid;
  (* src = "fsic.vo:74.16-74.35" *)
  wire [14:0] axi_araddr_s_araddr;
  (* src = "fsic.vo:60.16-60.40" *)
  wire axi_arready_axi_arready0;
  (* src = "fsic.vo:65.16-65.40" *)
  wire axi_arready_axi_arready2;
  (* src = "fsic.vo:55.16-55.40" *)
  wire axi_arready_axi_arready3;
  (* src = "fsic.vo:50.16-50.40" *)
  wire axi_arready_axi_arready4;
  (* src = "fsic.vo:73.16-73.37" *)
  wire axi_arvalid_s_arvalid;
  (* src = "fsic.vo:69.16-69.35" *)
  wire [14:0] axi_awaddr_s_awaddr;
  (* src = "fsic.vo:58.16-58.40" *)
  wire axi_awready_axi_awready0;
  (* src = "fsic.vo:63.16-63.40" *)
  wire axi_awready_axi_awready2;
  (* src = "fsic.vo:53.16-53.40" *)
  wire axi_awready_axi_awready3;
  (* src = "fsic.vo:48.16-48.40" *)
  wire axi_awready_axi_awready4;
  (* src = "fsic.vo:68.16-68.37" *)
  wire axi_awvalid_s_awvalid;
  (* src = "fsic.vo:159.16-159.23" *)
  wire axi_clk;
  (* src = "fsic.vo:61.16-61.36" *)
  wire [31:0] axi_rdata_axi_rdata0;
  (* src = "fsic.vo:66.16-66.36" *)
  wire [31:0] axi_rdata_axi_rdata2;
  (* src = "fsic.vo:56.16-56.36" *)
  wire [31:0] axi_rdata_axi_rdata3;
  (* src = "fsic.vo:51.16-51.36" *)
  wire [31:0] axi_rdata_axi_rdata4;
  (* src = "fsic.vo:160.16-160.27" *)
  wire axi_reset_n;
  (* src = "fsic.vo:75.16-75.35" *)
  wire axi_rready_s_rready;
  (* src = "fsic.vo:62.16-62.38" *)
  wire axi_rvalid_axi_rvalid0;
  (* src = "fsic.vo:67.16-67.38" *)
  wire axi_rvalid_axi_rvalid2;
  (* src = "fsic.vo:57.16-57.38" *)
  wire axi_rvalid_axi_rvalid3;
  (* src = "fsic.vo:52.16-52.38" *)
  wire axi_rvalid_axi_rvalid4;
  (* src = "fsic.vo:71.16-71.33" *)
  wire [31:0] axi_wdata_s_wdata;
  (* src = "fsic.vo:59.16-59.38" *)
  wire axi_wready_axi_wready0;
  (* src = "fsic.vo:64.16-64.38" *)
  wire axi_wready_axi_wready2;
  (* src = "fsic.vo:54.16-54.38" *)
  wire axi_wready_axi_wready3;
  (* src = "fsic.vo:49.16-49.38" *)
  wire axi_wready_axi_wready4;
  (* src = "fsic.vo:72.16-72.33" *)
  wire [3:0] axi_wstrb_s_wstrb;
  (* src = "fsic.vo:70.16-70.35" *)
  wire axi_wvalid_s_wvalid;
  (* src = "fsic.vo:161.16-161.24" *)
  wire axis_clk;
  (* src = "fsic.vo:163.16-163.26" *)
  wire axis_rst_n;
  (* src = "fsic.vo:81.16-81.28" *)
  wire cc_aa_enable;
  (* src = "fsic.vo:97.16-97.28" *)
  wire cc_as_enable;
  (* src = "fsic.vo:128.16-128.28" *)
  wire cc_is_enable;
  (* src = "fsic.vo:140.16-140.28" *)
  wire cc_la_enable;
  (* src = "fsic.vo:143.16-143.28" *)
  wire cc_up_enable;
  (* src = "fsic.vo:127.16-127.40" *)
  wire high_pri_irq_up_hpri_req;
  (* src = "fsic.vo:156.16-156.22" *)
  wire io_clk;
  (* src = "fsic.vo:20.25-20.30" *)
  input [37:0] io_in;
  wire [37:0] io_in;
  (* src = "fsic.vo:30.25-30.31" *)
  output [37:0] io_oeb;
  wire [37:0] io_oeb;
  (* src = "fsic.vo:29.25-29.31" *)
  output [37:0] io_out;
  wire [37:0] io_out;
  (* src = "fsic.vo:137.16-137.21" *)
  wire ioclk;
  (* src = "fsic.vo:105.16-105.27" *)
  wire [31:0] is_as_tdata;
  (* src = "fsic.vo:109.16-109.25" *)
  wire [1:0] is_as_tid;
  (* src = "fsic.vo:107.16-107.27" *)
  wire [3:0] is_as_tkeep;
  (* src = "fsic.vo:108.16-108.27" *)
  wire is_as_tlast;
  (* src = "fsic.vo:112.16-112.28" *)
  wire is_as_tready;
  (* src = "fsic.vo:106.16-106.27" *)
  wire [3:0] is_as_tstrb;
  (* src = "fsic.vo:111.16-111.27" *)
  wire [1:0] is_as_tuser;
  (* src = "fsic.vo:110.16-110.28" *)
  wire is_as_tvalid;
  (* src = "fsic.vo:18.25-18.35" *)
  input [127:0] la_data_in;
  wire [127:0] la_data_in;
  (* src = "fsic.vo:27.25-27.36" *)
  output [127:0] la_data_out;
  wire [127:0] la_data_out;
  (* src = "fsic.vo:119.16-119.27" *)
  wire la_hpri_req;
  (* src = "fsic.vo:19.25-19.32" *)
  input [127:0] la_oenb;
  wire [127:0] la_oenb;
  (* src = "fsic.vo:152.16-152.26" *)
  wire [63:0] la_up_data;
  (* src = "fsic.vo:154.16-154.28" *)
  wire low__pri_irq;
  (* src = "fsic.vo:41.16-41.38" *)
  wire [31:0] m_araddr_aa_cfg_araddr;
  (* src = "fsic.vo:40.16-40.40" *)
  wire m_arvalid_aa_cfg_arvalid;
  (* src = "fsic.vo:36.16-36.38" *)
  wire [31:0] m_awaddr_aa_cfg_awaddr;
  (* src = "fsic.vo:35.16-35.40" *)
  wire m_awvalid_aa_cfg_awvalid;
  (* src = "fsic.vo:42.16-42.38" *)
  wire m_rready_aa_cfg_rready;
  (* src = "fsic.vo:113.16-113.35" *)
  wire [31:0] m_tdata_la_as_tdata;
  (* src = "fsic.vo:120.16-120.35" *)
  wire [31:0] m_tdata_up_as_tdata;
  (* src = "fsic.vo:115.16-115.35" *)
  wire [3:0] m_tkeep_la_as_tkeep;
  (* src = "fsic.vo:122.16-122.35" *)
  wire [3:0] m_tkeep_up_as_tkeep;
  (* src = "fsic.vo:116.16-116.35" *)
  wire m_tlast_la_as_tlast;
  (* src = "fsic.vo:123.16-123.35" *)
  wire m_tlast_up_as_tlast;
  (* src = "fsic.vo:114.16-114.35" *)
  wire [3:0] m_tstrb_la_as_tstrb;
  (* src = "fsic.vo:121.16-121.35" *)
  wire [3:0] m_tstrb_up_as_tstrb;
  (* src = "fsic.vo:118.16-118.35" *)
  wire [1:0] m_tuser_la_as_tuser;
  (* src = "fsic.vo:125.16-125.35" *)
  wire [1:0] m_tuser_up_as_tuser;
  (* src = "fsic.vo:117.16-117.37" *)
  wire m_tvalid_la_as_tvalid;
  (* src = "fsic.vo:124.16-124.37" *)
  wire m_tvalid_up_as_tvalid;
  (* src = "fsic.vo:38.16-38.36" *)
  wire [31:0] m_wdata_aa_cfg_wdata;
  (* src = "fsic.vo:39.16-39.36" *)
  wire [3:0] m_wstrb_aa_cfg_wstrb;
  (* src = "fsic.vo:37.16-37.38" *)
  wire m_wvalid_aa_cfg_wvalid;
  (* src = "fsic.vo:153.16-153.22" *)
  wire mb_irq;
  (* src = "fsic.vo:45.16-45.38" *)
  wire s_arready_axi_arready1;
  (* src = "fsic.vo:44.16-44.38" *)
  wire s_awready_axi_awready1;
  (* src = "fsic.vo:46.16-46.34" *)
  wire [31:0] s_rdata_axi_rdata1;
  (* src = "fsic.vo:47.16-47.36" *)
  wire s_rvalid_axi_rvalid1;
  (* src = "fsic.vo:126.16-126.37" *)
  wire s_tready_up_as_tready;
  (* src = "fsic.vo:43.16-43.36" *)
  wire s_wready_axi_wready1;
  (* src = "fsic.vo:139.16-139.27" *)
  wire serial_rclk;
  (* src = "fsic.vo:138.16-138.26" *)
  wire [11:0] serial_rxd;
  (* src = "fsic.vo:158.16-158.27" *)
  wire serial_tclk;
  (* src = "fsic.vo:157.16-157.26" *)
  wire [11:0] serial_txd;
  (* src = "fsic.vo:162.16-162.26" *)
  wire uck2_rst_n;
  (* src = "fsic.vo:142.16-142.26" *)
  wire [63:0] up_la_data;
  (* src = "fsic.vo:31.25-31.36" *)
  input user_clock2;
  wire user_clock2;
  (* src = "fsic.vo:28.25-28.33" *)
  output [2:0] user_irq;
  wire [2:0] user_irq;
  (* src = "fsic.vo:144.16-144.28" *)
  wire [4:0] user_prj_sel;
  (* src = "fsic.vo:21.25-21.30" *)
  input vccd1;
  wire vccd1;
  (* src = "fsic.vo:22.25-22.30" *)
  input vccd2;
  wire vccd2;
  (* src = "fsic.vo:23.25-23.30" *)
  input vssd1;
  wire vssd1;
  (* src = "fsic.vo:24.25-24.30" *)
  input vssd2;
  wire vssd2;
  (* src = "fsic.vo:11.25-11.31" *)
  input wb_clk;
  wire wb_clk;
  (* src = "fsic.vo:10.25-10.31" *)
  input wb_rst;
  wire wb_rst;
  (* src = "fsic.vo:25.25-25.32" *)
  output wbs_ack;
  wire wbs_ack;
  (* src = "fsic.vo:12.25-12.32" *)
  input [31:0] wbs_adr;
  wire [31:0] wbs_adr;
  (* src = "fsic.vo:15.25-15.32" *)
  input wbs_cyc;
  wire wbs_cyc;
  (* src = "fsic.vo:26.25-26.34" *)
  output [31:0] wbs_rdata;
  wire [31:0] wbs_rdata;
  (* src = "fsic.vo:14.25-14.32" *)
  input [3:0] wbs_sel;
  wire [3:0] wbs_sel;
  (* src = "fsic.vo:16.25-16.32" *)
  input wbs_stb;
  wire wbs_stb;
  (* src = "fsic.vo:13.25-13.34" *)
  input [31:0] wbs_wdata;
  wire [31:0] wbs_wdata;
  (* src = "fsic.vo:17.25-17.31" *)
  input wbs_we;
  wire wbs_we;
  (* src = "fsic.vo:307.31-378.41" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIS_SW  AXIS_SW0 (
    .aa_as_tdata(aa_as_tdata),
    .aa_as_tkeep(aa_as_tkeep),
    .aa_as_tlast(aa_as_tlast),
    .aa_as_tready(aa_as_tready),
    .aa_as_tstrb(aa_as_tstrb),
    .aa_as_tuser(aa_as_tuser),
    .aa_as_tvalid(aa_as_tvalid),
    .as_aa_tdata(as_aa_tdata),
    .as_aa_tkeep(as_aa_tkeep),
    .as_aa_tlast(as_aa_tlast),
    .as_aa_tready(as_aa_tready),
    .as_aa_tstrb(as_aa_tstrb),
    .as_aa_tuser(as_aa_tuser),
    .as_aa_tvalid(as_aa_tvalid),
    .as_is_tdata(as_is_tdata),
    .as_is_tid(as_is_tid),
    .as_is_tkeep(as_is_tkeep),
    .as_is_tlast(as_is_tlast),
    .as_is_tready(as_is_tready),
    .as_is_tstrb(as_is_tstrb),
    .as_is_tuser(as_is_tuser),
    .as_is_tvalid(as_is_tvalid),
    .as_la_tready(as_la_tready_m_tready),
    .as_up_tdata(as_up_tdata_s_tdata),
    .as_up_tkeep(as_up_tkeep_s_tkeep),
    .as_up_tlast(as_up_tlast_s_tlast),
    .as_up_tready(as_up_tready_m_tready),
    .as_up_tstrb(as_up_tstrb_s_tstrb),
    .as_up_tuser(as_up_tuser_s_tuser),
    .as_up_tvalid(as_up_tvalid_s_tvalid),
    .axi_araddr(axi_araddr_s_araddr),
    .axi_arready(axi_arready_axi_arready4),
    .axi_arvalid(axi_arvalid_s_arvalid),
    .axi_awaddr(axi_awaddr_s_awaddr),
    .axi_awready(axi_awready_axi_awready4),
    .axi_awvalid(axi_awvalid_s_awvalid),
    .axi_rdata(axi_rdata_axi_rdata4),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready_s_rready),
    .axi_rvalid(axi_rvalid_axi_rvalid4),
    .axi_wdata(axi_wdata_s_wdata),
    .axi_wready(axi_wready_axi_wready4),
    .axi_wstrb(axi_wstrb_s_wstrb),
    .axi_wvalid(axi_wvalid_s_wvalid),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .cc_as_enable(cc_as_enable),
    .is_as_tdata(is_as_tdata),
    .is_as_tid(is_as_tid),
    .is_as_tkeep(is_as_tkeep),
    .is_as_tlast(is_as_tlast),
    .is_as_tready(is_as_tready),
    .is_as_tstrb(is_as_tstrb),
    .is_as_tuser(is_as_tuser),
    .is_as_tvalid(is_as_tvalid),
    .la_as_tdata(m_tdata_la_as_tdata),
    .la_as_tkeep(m_tkeep_la_as_tkeep),
    .la_as_tlast(m_tlast_la_as_tlast),
    .la_as_tstrb(m_tstrb_la_as_tstrb),
    .la_as_tuser(m_tuser_la_as_tuser),
    .la_as_tvalid(m_tvalid_la_as_tvalid),
    .la_hpri_req(la_hpri_req),
    .up_as_tdata(m_tdata_up_as_tdata),
    .up_as_tkeep(m_tkeep_up_as_tkeep),
    .up_as_tlast(m_tlast_up_as_tlast),
    .up_as_tready(s_tready_up_as_tready),
    .up_as_tstrb(m_tstrb_up_as_tstrb),
    .up_as_tuser(m_tuser_up_as_tuser),
    .up_as_tvalid(m_tvalid_up_as_tvalid),
    .up_hpri_req(high_pri_irq_up_hpri_req)
  );
  (* src = "fsic.vo:250.33-297.47" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\AXIL_AXIS  U_AXIL_AXIS0 (
    .aa_as_tdata(aa_as_tdata),
    .aa_as_tkeep(aa_as_tkeep),
    .aa_as_tlast(aa_as_tlast),
    .aa_as_tready(aa_as_tready),
    .aa_as_tstrb(aa_as_tstrb),
    .aa_as_tuser(aa_as_tuser),
    .aa_as_tvalid(aa_as_tvalid),
    .as_aa_tdata(as_aa_tdata),
    .as_aa_tkeep(as_aa_tkeep),
    .as_aa_tlast(as_aa_tlast),
    .as_aa_tready(as_aa_tready),
    .as_aa_tstrb(as_aa_tstrb),
    .as_aa_tuser(as_aa_tuser),
    .as_aa_tvalid(as_aa_tvalid),
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .cc_aa_enable(cc_aa_enable),
    .m_araddr(m_araddr_aa_cfg_araddr),
    .m_arready(aa_cfg_arready_m_arready),
    .m_arvalid(m_arvalid_aa_cfg_arvalid),
    .m_awaddr(m_awaddr_aa_cfg_awaddr),
    .m_awready(aa_cfg_awready_m_awready),
    .m_awvalid(m_awvalid_aa_cfg_awvalid),
    .m_rdata(aa_cfg_rdata_m_rdata),
    .m_rready(m_rready_aa_cfg_rready),
    .m_rvalid(aa_cfg_rvalid_m_rvalid),
    .m_wdata(m_wdata_aa_cfg_wdata),
    .m_wready(aa_cfg_wready_m_wready),
    .m_wstrb(m_wstrb_aa_cfg_wstrb),
    .m_wvalid(m_wvalid_aa_cfg_wvalid),
    .mb_irq(mb_irq),
    .s_araddr(axi_araddr_s_araddr),
    .s_arready(s_arready_axi_arready1),
    .s_arvalid(axi_arvalid_s_arvalid),
    .s_awaddr(axi_awaddr_s_awaddr),
    .s_awready(s_awready_axi_awready1),
    .s_awvalid(axi_awvalid_s_awvalid),
    .s_rdata(s_rdata_axi_rdata1),
    .s_rready(axi_rready_s_rready),
    .s_rvalid(s_rvalid_axi_rvalid1),
    .s_wdata(axi_wdata_s_wdata),
    .s_wready(s_wready_axi_wready1),
    .s_wstrb(axi_wstrb_s_wstrb),
    .s_wvalid(axi_wvalid_s_wvalid)
  );
  (* src = "fsic.vo:173.32-240.45" *)
  \$paramod$3faf3427151f109282c99465db437054f2e3eec4\CFG_CTRL  U_CFG_CTRL0 (
    .aa_cfg_araddr(m_araddr_aa_cfg_araddr),
    .aa_cfg_arready(aa_cfg_arready_m_arready),
    .aa_cfg_arvalid(m_arvalid_aa_cfg_arvalid),
    .aa_cfg_awaddr(m_awaddr_aa_cfg_awaddr),
    .aa_cfg_awready(aa_cfg_awready_m_awready),
    .aa_cfg_awvalid(m_awvalid_aa_cfg_awvalid),
    .aa_cfg_rdata(aa_cfg_rdata_m_rdata),
    .aa_cfg_rready(m_rready_aa_cfg_rready),
    .aa_cfg_rvalid(aa_cfg_rvalid_m_rvalid),
    .aa_cfg_wdata(m_wdata_aa_cfg_wdata),
    .aa_cfg_wready(aa_cfg_wready_m_wready),
    .aa_cfg_wstrb(m_wstrb_aa_cfg_wstrb),
    .aa_cfg_wvalid(m_wvalid_aa_cfg_wvalid),
    .axi_araddr(axi_araddr_s_araddr),
    .axi_arready0(axi_arready_axi_arready0),
    .axi_arready1(s_arready_axi_arready1),
    .axi_arready2(axi_arready_axi_arready2),
    .axi_arready3(axi_arready_axi_arready3),
    .axi_arready4(axi_arready_axi_arready4),
    .axi_arvalid(axi_arvalid_s_arvalid),
    .axi_awaddr(axi_awaddr_s_awaddr),
    .axi_awready0(axi_awready_axi_awready0),
    .axi_awready1(s_awready_axi_awready1),
    .axi_awready2(axi_awready_axi_awready2),
    .axi_awready3(axi_awready_axi_awready3),
    .axi_awready4(axi_awready_axi_awready4),
    .axi_awvalid(axi_awvalid_s_awvalid),
    .axi_clk(axi_clk),
    .axi_rdata0(axi_rdata_axi_rdata0),
    .axi_rdata1(s_rdata_axi_rdata1),
    .axi_rdata2(axi_rdata_axi_rdata2),
    .axi_rdata3(axi_rdata_axi_rdata3),
    .axi_rdata4(axi_rdata_axi_rdata4),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready_s_rready),
    .axi_rvalid0(axi_rvalid_axi_rvalid0),
    .axi_rvalid1(s_rvalid_axi_rvalid1),
    .axi_rvalid2(axi_rvalid_axi_rvalid2),
    .axi_rvalid3(axi_rvalid_axi_rvalid3),
    .axi_rvalid4(axi_rvalid_axi_rvalid4),
    .axi_wdata(axi_wdata_s_wdata),
    .axi_wready0(axi_wready_axi_wready0),
    .axi_wready1(s_wready_axi_wready1),
    .axi_wready2(axi_wready_axi_wready2),
    .axi_wready3(axi_wready_axi_wready3),
    .axi_wready4(axi_wready_axi_wready4),
    .axi_wstrb(axi_wstrb_s_wstrb),
    .axi_wvalid(axi_wvalid_s_wvalid),
    .cc_aa_enable(cc_aa_enable),
    .cc_as_enable(cc_as_enable),
    .cc_is_enable(cc_is_enable),
    .cc_la_enable(cc_la_enable),
    .cc_up_enable(cc_up_enable),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .user_prj_sel(user_prj_sel),
    .wb_clk(wb_clk),
    .wb_rst(wb_rst),
    .wbs_ack(wbs_ack),
    .wbs_adr(wbs_adr),
    .wbs_cyc(wbs_cyc),
    .wbs_rdata(wbs_rdata),
    .wbs_sel(wbs_sel),
    .wbs_stb(wbs_stb),
    .wbs_wdata(wbs_wdata),
    .wbs_we(wbs_we)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "fsic.vo:534.14-550.30" *)
  FSIC_CLKRST U_FSIC_CLKRST0 (
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .high_pri_irq(high_pri_irq_up_hpri_req),
    .io_clk(io_clk),
    .ioclk(ioclk),
    .low__pri_irq(low__pri_irq),
    .mb_irq(mb_irq),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .user_irq(user_irq),
    .user_prj_sel(user_prj_sel),
    .wb_clk(wb_clk),
    .wb_rst(wb_rst)
  );
  (* src = "fsic.vo:391.37-431.51" *)
  \$paramod$0b6fd40895842c6fb139ea30722e0fc4a75b434f\IO_SERDES  U_IO_SERDES0 (
    .as_is_tdata(as_is_tdata),
    .as_is_tid(as_is_tid),
    .as_is_tkeep(as_is_tkeep),
    .as_is_tlast(as_is_tlast),
    .as_is_tready(as_is_tready),
    .as_is_tstrb(as_is_tstrb),
    .as_is_tuser(as_is_tuser),
    .as_is_tvalid(as_is_tvalid),
    .axi_araddr(axi_araddr_s_araddr[11:0]),
    .axi_arready(axi_arready_axi_arready3),
    .axi_arvalid(axi_arvalid_s_arvalid),
    .axi_awaddr(axi_awaddr_s_awaddr[11:0]),
    .axi_awready(axi_awready_axi_awready3),
    .axi_awvalid(axi_awvalid_s_awvalid),
    .axi_clk(axi_clk),
    .axi_rdata(axi_rdata_axi_rdata3),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready_s_rready),
    .axi_rvalid(axi_rvalid_axi_rvalid3),
    .axi_wdata(axi_wdata_s_wdata),
    .axi_wready(axi_wready_axi_wready3),
    .axi_wstrb(axi_wstrb_s_wstrb),
    .axi_wvalid(axi_wvalid_s_wvalid),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .cc_is_enable(cc_is_enable),
    .ioclk(ioclk),
    .is_as_tdata(is_as_tdata),
    .is_as_tid(is_as_tid),
    .is_as_tkeep(is_as_tkeep),
    .is_as_tlast(is_as_tlast),
    .is_as_tready(is_as_tready),
    .is_as_tstrb(is_as_tstrb),
    .is_as_tuser(is_as_tuser),
    .is_as_tvalid(is_as_tvalid),
    .serial_rclk(serial_rclk),
    .serial_rxd(serial_rxd),
    .serial_tclk(serial_tclk),
    .serial_txd(serial_txd)
  );
  (* src = "fsic.vo:441.34-475.49" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\LOGIC_ANLZ  U_LOGIC_ANLZ0 (
    .axi_araddr(axi_araddr_s_araddr),
    .axi_arready(axi_arready_axi_arready0),
    .axi_arvalid(axi_arvalid_s_arvalid),
    .axi_awaddr(axi_awaddr_s_awaddr),
    .axi_awready(axi_awready_axi_awready0),
    .axi_awvalid(axi_awvalid_s_awvalid),
    .axi_clk(axi_clk),
    .axi_rdata(axi_rdata_axi_rdata0),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready_s_rready),
    .axi_rvalid(axi_rvalid_axi_rvalid0),
    .axi_wdata(axi_wdata_s_wdata),
    .axi_wready(axi_wready_axi_wready0),
    .axi_wstrb(axi_wstrb_s_wstrb),
    .axi_wvalid(axi_wvalid_s_wvalid),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .cc_la_enable(cc_la_enable),
    .la_data_in(la_data_in),
    .la_data_out(la_data_out),
    .la_hpri_req(la_hpri_req),
    .la_oenb(la_oenb),
    .la_up_data(la_up_data),
    .m_tdata(m_tdata_la_as_tdata),
    .m_tkeep(m_tkeep_la_as_tkeep),
    .m_tlast(m_tlast_la_as_tlast),
    .m_tready(as_la_tready_m_tready),
    .m_tstrb(m_tstrb_la_as_tstrb),
    .m_tuser(m_tuser_la_as_tuser),
    .m_tvalid(m_tvalid_la_as_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .up_la_data(up_la_data),
    .user_clock2(user_clock2)
  );
  (* src = "fsic.vo:560.31-580.43" *)
  \$paramod$dce6b6a5da2812dbe1b9cc3a0671da84ccd9b415\MPRJ_IO  U_MPRJ_IO0 (
    .axi_clk(axi_clk),
    .axi_reset_n(axi_reset_n),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .io_clk(io_clk),
    .io_in(io_in),
    .io_oeb(io_oeb),
    .io_out(io_out),
    .serial_rclk(serial_rclk),
    .serial_rxd(serial_rxd),
    .serial_tclk(serial_tclk),
    .serial_txd(serial_txd),
    .uck2_rst_n(uck2_rst_n),
    .user_clock2(user_clock2),
    .user_prj_sel(user_prj_sel),
    .vccd1(vccd1),
    .vccd2(vccd2),
    .vssd1(vssd1),
    .vssd2(vssd2)
  );
  (* src = "fsic.vo:485.35-525.51" *)
  \$paramod$3faf3427151f109282c99465db437054f2e3eec4\USER_SUBSYS  U_USER_SUBSYS0 (
    .axi_araddr(axi_araddr_s_araddr),
    .axi_arready(axi_arready_axi_arready2),
    .axi_arvalid(axi_arvalid_s_arvalid),
    .axi_awaddr(axi_awaddr_s_awaddr),
    .axi_awready(axi_awready_axi_awready2),
    .axi_awvalid(axi_awvalid_s_awvalid),
    .axi_clk(axi_clk),
    .axi_rdata(axi_rdata_axi_rdata2),
    .axi_reset_n(axi_reset_n),
    .axi_rready(axi_rready_s_rready),
    .axi_rvalid(axi_rvalid_axi_rvalid2),
    .axi_wdata(axi_wdata_s_wdata),
    .axi_wready(axi_wready_axi_wready2),
    .axi_wstrb(axi_wstrb_s_wstrb),
    .axi_wvalid(axi_wvalid_s_wvalid),
    .axis_clk(axis_clk),
    .axis_rst_n(axis_rst_n),
    .cc_up_enable(cc_up_enable),
    .high_pri_irq(high_pri_irq_up_hpri_req),
    .la_up_data(la_up_data),
    .low__pri_irq(low__pri_irq),
    .m_tdata(m_tdata_up_as_tdata),
    .m_tkeep(m_tkeep_up_as_tkeep),
    .m_tlast(m_tlast_up_as_tlast),
    .m_tready(as_up_tready_m_tready),
    .m_tstrb(m_tstrb_up_as_tstrb),
    .m_tuser(m_tuser_up_as_tuser),
    .m_tvalid(m_tvalid_up_as_tvalid),
    .s_tdata(as_up_tdata_s_tdata),
    .s_tkeep(as_up_tkeep_s_tkeep),
    .s_tlast(as_up_tlast_s_tlast),
    .s_tready(s_tready_up_as_tready),
    .s_tstrb(as_up_tstrb_s_tstrb),
    .s_tuser(as_up_tuser_s_tuser),
    .s_tvalid(as_up_tvalid_s_tvalid),
    .uck2_rst_n(uck2_rst_n),
    .up_la_data(up_la_data),
    .user_clock2(user_clock2),
    .user_prj_sel(user_prj_sel)
  );
endmodule

(* src = "fsic_clkrst.v:6.1-92.10" *)
module FSIC_CLKRST(user_prj_sel, mb_irq, wb_rst, wb_clk, user_irq, low__pri_irq, high_pri_irq, user_clock2, uck2_rst_n, axi_clk, axi_reset_n, axis_clk, axis_rst_n, io_clk, ioclk);
  (* src = "fsic_clkrst.v:19.24-19.31" *)
  output axi_clk;
  wire axi_clk;
  (* src = "fsic_clkrst.v:20.23-20.34" *)
  output axi_reset_n;
  wire axi_reset_n;
  (* src = "fsic_clkrst.v:35.11-35.23" *)
  reg [2:0] axi_reset_nr;
  (* src = "fsic_clkrst.v:22.24-22.32" *)
  output axis_clk;
  wire axis_clk;
  (* src = "fsic_clkrst.v:23.23-23.33" *)
  output axis_rst_n;
  wire axis_rst_n;
  (* src = "fsic_clkrst.v:47.11-47.22" *)
  reg [2:0] axis_rst_nr;
  (* src = "fsic_clkrst.v:14.23-14.35" *)
  input high_pri_irq;
  wire high_pri_irq;
  (* src = "fsic_clkrst.v:25.23-25.29" *)
  input io_clk;
  wire io_clk;
  (* src = "fsic_clkrst.v:26.23-26.28" *)
  output ioclk;
  wire ioclk;
  (* src = "fsic_clkrst.v:13.23-13.35" *)
  input low__pri_irq;
  wire low__pri_irq;
  (* src = "fsic_clkrst.v:8.23-8.29" *)
  input mb_irq;
  wire mb_irq;
  (* src = "fsic_clkrst.v:17.23-17.33" *)
  output uck2_rst_n;
  wire uck2_rst_n;
  (* src = "fsic_clkrst.v:59.11-59.22" *)
  reg [2:0] uck2_rst_nr;
  (* src = "fsic_clkrst.v:16.23-16.34" *)
  input user_clock2;
  wire user_clock2;
  (* src = "fsic_clkrst.v:11.23-11.31" *)
  output [2:0] user_irq;
  wire [2:0] user_irq;
  (* src = "fsic_clkrst.v:7.23-7.35" *)
  input [4:0] user_prj_sel;
  wire [4:0] user_prj_sel;
  (* src = "fsic_clkrst.v:10.23-10.29" *)
  input wb_clk;
  wire wb_clk;
  (* src = "fsic_clkrst.v:9.23-9.29" *)
  input wb_rst;
  wire wb_rst;
  (* src = "fsic_clkrst.v:60.1-64.45" *)
  always @(posedge user_clock2, posedge wb_rst)
    if (wb_rst) uck2_rst_nr <= 3'h0;
    else uck2_rst_nr <= { uck2_rst_nr[1:0], 1'h1 };
  (* src = "fsic_clkrst.v:48.1-52.45" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) axis_rst_nr <= 3'h0;
    else axis_rst_nr <= { axis_rst_nr[1:0], 1'h1 };
  (* src = "fsic_clkrst.v:36.1-40.47" *)
  always @(posedge wb_clk, posedge wb_rst)
    if (wb_rst) axi_reset_nr <= 3'h0;
    else axi_reset_nr <= { axi_reset_nr[1:0], 1'h1 };
  assign axi_clk = wb_clk;
  assign axi_reset_n = axi_reset_nr[2];
  assign axis_clk = wb_clk;
  assign axis_rst_n = axis_rst_nr[2];
  assign ioclk = io_clk;
  assign uck2_rst_n = uck2_rst_nr[2];
  assign user_irq = { high_pri_irq, low__pri_irq, mb_irq };
endmodule
