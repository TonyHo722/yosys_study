
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.script' --

1. Executing Verilog-2005 frontend: fsic_coreclk_phase_cnt.v
Parsing Verilog input from `fsic_coreclk_phase_cnt.v' to AST representation.
Generating RTLIL representation for module `\fsic_coreclk_phase_cnt'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: fsic_io_serdes_rx.v
Parsing Verilog input from `fsic_io_serdes_rx.v' to AST representation.
Generating RTLIL representation for module `\fsic_io_serdes_rx'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: io_serdes.v
Parsing Verilog input from `io_serdes.v' to AST representation.
Generating RTLIL representation for module `\IO_SERDES'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \IO_SERDES
Used module:     \fsic_io_serdes_rx
Used module:     \fsic_coreclk_phase_cnt

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Generating RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.9. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.12. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.13. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_io_serdes_rx'.
Parameter \pRxFIFO_DEPTH = 5
Parameter \pCLK_RATIO = 4
Found cached RTLIL representation for module `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4'.

4.14. Executing AST frontend in derive mode using pre-parsed AST for module `\fsic_coreclk_phase_cnt'.
Parameter \pCLK_RATIO = 4
Generating RTLIL representation for module `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4'.

4.15. Analyzing design hierarchy..
Top module:  \IO_SERDES
Used module:     $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4
Used module:     $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4

4.16. Analyzing design hierarchy..
Top module:  \IO_SERDES
Used module:     $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4
Used module:     $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4
Removing unused module `\fsic_io_serdes_rx'.
Removing unused module `\fsic_coreclk_phase_cnt'.
Removed 2 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$io_serdes.v:447$102 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$io_serdes.v:345$100 in module IO_SERDES.
Marked 1 switch rules as full_case in process $proc$io_serdes.v:274$88 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$io_serdes.v:241$83 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$io_serdes.v:223$80 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$io_serdes.v:205$75 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$io_serdes.v:156$69 in module IO_SERDES.
Marked 2 switch rules as full_case in process $proc$fsic_coreclk_phase_cnt.v:72$171 in module $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_coreclk_phase_cnt.v:61$169 in module $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_coreclk_phase_cnt.v:49$167 in module $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_coreclk_phase_cnt.v:37$164 in module $paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.
Marked 2 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:165$161 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:148$157 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 2 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:134$154 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:120$151 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 3 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:102$147 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 2 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:87$144 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:75$142 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 1 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:64$138 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Marked 2 switch rules as full_case in process $proc$fsic_io_serdes_rx.v:48$132 in module $paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.
Removed a total of 0 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \axis_rst_n in `\IO_SERDES.$proc$io_serdes.v:345$100'.
Found async reset \axis_rst_n in `\IO_SERDES.$proc$io_serdes.v:274$88'.
Found async reset \axis_rst_n in `\IO_SERDES.$proc$io_serdes.v:223$80'.
Found async reset \axis_rst_n in `\IO_SERDES.$proc$io_serdes.v:205$75'.
Found async reset \axi_reset_n in `\IO_SERDES.$proc$io_serdes.v:156$69'.
Found async reset \axis_rst_n in `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:72$171'.
Found async reset \axis_rst_n in `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:61$169'.
Found async reset \axis_rst_n in `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:49$167'.
Found async reset \axis_rst_n in `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:37$164'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:165$161'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:148$157'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:134$154'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:120$151'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:102$147'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:87$144'.
Found async reset \axis_rst_n in `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:75$142'.

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:447$102'.
     1/1: $0\is_as_tready_out[0:0]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:345$100'.
     1/1: $0\rxen[0:0]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:274$88'.
     1/5: $0\as_is_tlast_tvalid_tready_buf[3:0]
     2/5: $0\as_is_tid_tuser_buf[3:0]
     3/5: $0\as_is_tkeep_buf[3:0]
     4/5: $0\as_is_tstrb_buf[3:0]
     5/5: $0\as_is_tdata_buf[31:0]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:241$83'.
     1/9: $0\pre_as_is_tlast_tvalid_tready_buf[3:0] [3]
     2/9: $0\pre_as_is_tlast_tvalid_tready_buf[3:0] [0]
     3/9: $0\pre_as_is_tlast_tvalid_tready_buf[3:0] [1]
     4/9: $0\pre_as_is_tid_tuser_buf[3:0] [3:2]
     5/9: $0\pre_as_is_tid_tuser_buf[3:0] [1:0]
     6/9: $0\pre_as_is_tkeep_buf[3:0]
     7/9: $0\pre_as_is_tstrb_buf[3:0]
     8/9: $0\pre_as_is_tdata_buf[31:0]
     9/9: $0\pre_as_is_tlast_tvalid_tready_buf[3:0] [2]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:223$80'.
     1/1: $0\tx_shift_phase_cnt[1:0]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:205$75'.
     1/1: $0\txen[0:0]
Creating decoders for process `\IO_SERDES.$proc$io_serdes.v:156$69'.
     1/2: $0\txen_ctl[0:0]
     2/2: $0\rxen_ctl[0:0]
Creating decoders for process `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:72$171'.
     1/1: $0\phase_cnt[1:0]
Creating decoders for process `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:61$169'.
     1/2: $0\clk_seq[3:0] [3:1]
     2/2: $0\clk_seq[3:0] [0]
Creating decoders for process `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:49$167'.
     1/2: $0\sync_core_clk_toggle[0:0]
     2/2: $0\pre_core_clk_toggle[0:0]
Creating decoders for process `$paramod\fsic_coreclk_phase_cnt\pCLK_RATIO=4.$proc$fsic_coreclk_phase_cnt.v:37$164'.
     1/1: $0\core_clk_toggle[0:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:165$161'.
     1/2: $0\rx_sync_fifo_valid[0:0]
     2/2: $0\rx_sync_fifo[3:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:148$157'.
     1/2: $0\rx_start_delay[2:0] [2:1]
     2/2: $0\rx_start_delay[2:0] [0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:134$154'.
     1/1: $0\rx_shift_phase_cnt[1:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:120$151'.
     1/2: $0\rx_shift_reg[3:0] [3]
     2/2: $0\rx_shift_reg[3:0] [2:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:102$147'.
     1/1: $0\r_ptr[2:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:87$144'.
     1/1: $0\rx_start[0:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:75$142'.
     1/2: $0\w_ptr_sync[0:0]
     2/2: $0\w_ptr_pre[0:0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:64$138'.
     1/5: $0\RxFifo[4:0] [4]
     2/5: $0\RxFifo[4:0] [3]
     3/5: $0\RxFifo[4:0] [2]
     4/5: $0\RxFifo[4:0] [1]
     5/5: $0\RxFifo[4:0] [0]
Creating decoders for process `$paramod\fsic_io_serdes_rx\pRxFIFO_DEPTH=5\pCLK_RATIO=4.$proc$fsic_io_serdes_rx.v:48$132'.
     1/1: $0\w_ptr[2:0]

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.7. Executing PROC_DFF pass (convert process syncs to FFs).
ERROR: Multiple edge sensitive events found for this signal!
